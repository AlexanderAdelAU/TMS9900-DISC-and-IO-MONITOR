                        ;
                        ;---MONITOR AND FDC INTERFACE ROUTINES for the TI99000 SBC
                        ;
                        ;	The monitor routines are called from a DOS or other 
                        ;	programme to perform Console I/O and Disc I/O similar
                        ;	to a BIOS.
                        ;
                        ;	Version 2.0	14th May 2020 - The year of the Corona Virus
                        ;
                        ;   Written by Alex Cameron
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
  0007                  R7	EQU	7
  0008                  R8	EQU	8
  0009                  R9	EQU	9			;Use to index workspace pointer not stack overflow
                        ;SL	EQU	R9			;STACK LIMIT
  000A                  R10	EQU	10
                        ;SP	EQU	R10			;STACK POINTER
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000C                  PORT	EQU	R12			;IO BASE
  000D                  R13	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
  000F                  ST	EQU	15
                        ;
                        ;***************************************************
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        ;****************************************************
                        ;
                        	DXOP	PUSHREG,4	;PUSH RANGE OF REGISTERS TO STACH
                        	DXOP	POPREG,5	
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8		;PUSH SINGLE REGISTER
                        	DXOP	POP,9
                        	DXOP	WHEX,10		;WRITE OUT A 16 BIT HEX VALUE
                        	DXOP	RHEX,11		;READ IN A 16 BIT HEX VALUE
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13		;READ CHAR IN MSB
                        	DXOP	MESG,14		;OUTPUT NULL TERMINATED MESSAGE
                        	DXOP	DEBUG,15
                        ;
                        ; SOME EQUATES
                        ;
  F000                  TIMON	EQU	0F000H		;GO TO TIMON UNDER WORST CASE CONDITIONS
  CA00                  SHELL	EQU	0CA00H		;ADDRESS OF SHELL
  E600                  MONORG	EQU	0E600H		;ORIGIN FOR THIS MONITOR
  E5FE                  STACKP	EQU	MONORG - 2
  E5DE                  BOOT_TWP:	EQU	STACKP -32		;THIS IS BOOT TEMPORARY WORKSAPCE
  0000                  	BSS	32	;MONITOR WORKSPACE
  0008                  INTVEC	EQU	08H
  C600                  LOADER	EQU	0C600H 		; THIS IS THE LOADER ADDRESS
                        ;
                        ;NOTE DOS IS NOT KNOWN TO MONITOR.
                        ;
                        
                        ;
                        ; LOCATE THE MONITOR IN MEMORY
                        ;
  E600                  	AORG	MONORG
                        ;
                        ;************************************************************************************
                        ;
                        ;	NOTE ALL PROGRAMMES MUST SET THE WORSPACE
                        ;	POINTERS AND STACKS BEFORE CALLING
                        ;
                        ;	NOTE THE FIRST VECTOR BLWP - CALLED ONCE TO INITIALISE MONITOR
                        ;
                        ;*************************************************************************************
                        ;
  E600   EEA0           ENTRY	WORD	WORKSP		;THIS IS MONITOR WORKSAPCE
  E602   E6B8           	WORD	INIT		;INITIALISE ALL XOP, INTERRUPT AND ENTRY VECTORS
  E604   0460 E70E      BOOT_ADDR:	B	@BOOT		;PERFORM A COLD BOOT - POS IN TABLE HELPS DEBUGGING
  E608   0460 E768      	B	@CIN		;CHAR IN
  E60C   0460 E76C      	B	@COUT		;CHAR OUT
  E610   0460 E774      	B	@SELDSK		;SELECT A DISK DRIVE
  E614   0460 E832      	B	@RECAL	 	;RECALIBRATE DRIVES
  E618   0460 EA5A      	B	@SEEK		;SEEK THE TRACK IN R3
  E61C   0460 E86A      	B	@RDREC		;READ SELECTED SECTOR 
  E620   0460 E8C2      	B	@WRREC	 	;WRITE SELECTED SECTOR 
  E624   0460 E844      	B	@RDID		;READ TRACK ID ADDRESS
  E628   0460 E6F4      	B	@WBOOT		;PERFORM A WARM BOOT
  E62C   0460 E886      	B	@RDTRK		;READ A TRACK OF DATA
  E630   0460 E8A6      	B	@WRTRK		;WRITE A TRACK OF DATA
                        
                        ;
                        ;**********************************************************
                        ;
                        ;	DMA PARAMETER BLOCK DEFINITIONS
                        ;	INDEXED DEPENDING ON READ(0), OR WRITE(1) COMMAND
                        ;
                        ;************************************************************
                        ;
  E634   34B8           CMDTBL:	STCR	*R8+,BYTEWIDE		;BYTE WIDE FDC DATA READ
  E636   30B8           	LDCR	*R8+,BYTEWIDE		;BYTE WIDE FDC DATA WRITE
                        ;
                        ;--REGISTERS IN INTERRUPT 3 WORKSPACE  
                        ;
  EBE2                  DMACMD	SET	2*R9+INTWP2	;CURRENT COMMAND
  EBE0                  DMAADDR 	SET	2*R8+INTWP2	;REGISTER HOLDING SOURCE ADDRESS
  EBE8                  DMAPORT	SET	2*R12+INTWP2	;IO BASE REG I.E. DATAREG
                        ;
                        ;--IO	PARAMETER	BLOCK
                        ;
  E638   0000           FDCSTATUS	WORD	0	 	;OPERATION STATUS
  E63A   0000           BYTESRD	WORD	0		;A DEBUGGING FEATURE FOR NUMBER OF BYTES READ
  E63C   0000           TRKSTAT	WORD	0		;VERIFIED TRACK STATUS
  E63E   0000           SECSTAT	WORD	0		;VERIFIED SECTOR STATUS
  E640   0000           IOPTR	WORD	0		;IO BUFFER POINTER IN R8 OF DRQ INT
  E642   FFFF           TRACK	WORD	-1	 	;CURRENT SELECTED DRIVE TRACK NO
  E644   0000 0000      TRKTAB	WORD	0,0		;DRIVE 1, 2 => ;HEAD POSITIONS FOR 2 DRIVES	
  E648   0000 0000      TYPTAB	WORD	0,0		;DRIVE 1, 2 => BIT 1 1=SD,0=DD;BIT 2 1=MINI=5.25, 0=MINI=3.5
  E64C   0000           SECTOR	WORD	0	 	;CURRENT SECTOR NO.
  E64E   0000           SIDE	WORD	0		;SIDE SELECT BIT
  E650   0000           CMDTYP	WORD	0		;COMMAND TYPE
  E652   0000           DSKTYP	WORD	00B		;CURRENT UNIT / DENSITY INDICATOR (USING TYPTAB ABOVE)
  E654   0000           DRIVE	WORD	0		;CURRENT DRIVE
  E656   0007           FNDTRY:	WORD	7		;FIND TRACK RETRY COUNT
  E658   0005           MAXRWT	WORD	5		;NUMBER OF RETRIES ALLOWED
  E65A   0005           RWTRY	WORD	5
  E65C   0000           ERRTYP	WORD	0			;ERROR STAUTS FOR READ/WRITE ROUTINES
  E65E   0000           OPCOMP	WORD	0			;CLEARED WHEN IF DISK OPERATION COMPLETE
  E660   0000           DRVRDY	WORD	0			;CLEARED WHEN DRIVE READY TIME OUT
  E662   00             SELCPY	BYTE	0			;COPY OF DATA IN SELECT/MUX OUTPUTS
  E663   00             		EVEN
  E664   0000           INUSE	WORD	0
  E666   0D0A 00        CRLF	BYTE	0DH,0AH,0
  E669   00             		EVEN
  E66A   0004           REDTRY	WORD	4			;NO OF RETRIES
                        ;
                        ;1797-FDC COMMANDS
                        ;
  0088                  RDCMD:	EQU	10001000B 		;READ CMD
  00C0                  RIDCMD:	EQU	11000000B	 	;READ ID
  00A8                  WRCMD:	EQU	10101000B 		;WRITE CMD
  00F0                  WTCMD:	EQU	11110000B		;WRITE TRACK
  00E0                  RTCMD:	EQU	11100000B		;READ TRACK
  001C                  SEKCMD:	EQU	00011100B 		;SEEK CMD
  000C                  RSTCMD:	EQU	00001100B	 	;RESTORE COMMAND
  00D0                  FINTCMD:	EQU	11010000B		;FORCE INTERRUPT COMMAND
  005C                  SICMD:	EQU	01011100B		;STEP IN COMMAND
  007C                  SOCMD:	EQU	01111100B		;STEP OUT COMMAND
                        ;
                        ;--FDC 1797 IO REG LOCATIONS
                        ;
  8000                  FDC1797:	EQU	8000H		;IO BASE REGISTER- BYTE TRANSFER WITH MSB SET
  8000                  STSREG:	EQU	FDC1797+0 		;MAIN STATUS REG
  8000                  CMDREG:	EQU	FDC1797+0 		;COMMAND REGISTER
  8002                  TRKREG:	EQU	FDC1797+2		;TRACK REGISTER
  8004                  SECREG:	EQU	FDC1797+4		;SECTOR REGISTER
  8006                  DATREG:	EQU	FDC1797+6		;DATA REGISTER
                        ;
                        ;
                        ;--PORTS ETC.
                        ;
  0000                  SELMUX:	EQU	0		;SELECT CONTROL PORT
  000A                  TYPMUX:	EQU	SELMUX + 2*5	;START AT BIT 5
  0002                  BYTEWIDE:	EQU	2		;PARALLEL I/O DONE IN BYTES (UNIQUE TO 99105)
                        ;
                        ;
                        ;COLD	START	ENTRY	POINT
                        ;
                        ;
  E66C                  	EVEN
  E66C   EC30 ED40      XOPTAB	WORD	XOPWP0,XOP0,XOPWP1,XOP1,XOPWP2,XOP2,XOPWP3,XOP3
  E670   EC40 ED42      
  E674   EC50 ED44      
  E678   EC60 ED46      
  E67C   EC70 ED48      	WORD	XOPWP4,XOP4,XOPWP5,XOP5,XOPWP6,XOP6,XOPWP7,XOP7,XOPWP8,XOP8
  E680   EC80 ED5C      
  E684   EC90 ED6E      
  E688   ECA0 ED7E      
  E68C   ECB0 ED8A      
  E690   ECC0 ED98      	WORD	XOPWP9,XOP9,XOPWP10,XOP10,XOPWP11,XOP11
  E694   ECD0 EDA4      
  E698   ECE0 EDC8      
  E69C   ECF0 EDF8      	WORD	XOPWP12,XOP12,XOPWP13,XOP13,XOPWP14,XOP14,XOPWP15,XOP15
  E6A0   ED00 EE08      
  E6A4   ED10 EE18      
  E6A8   ED20 EE26      
                        ;
  E6AC   EBD0 EB42      INTTAB	WORD	INTWP2,INTDRQ,INTWP3,INTREQ	;FDC1797 INTERUPT VECTORS
  E6B0   EBE0 EB10      
  E6B4   EBF0 EB48      	WORD	INTWP4,INTTIMER		;TIMER INTERRUPT
                        ;
  E6B8                  	EVEN
                        
                        ;
                        ;	NOTE.  PROGRAMMES MUST CALL WITH THEIR WP POINTERS SET
                        ;	THIS CALL IS USED TO SET UP MONITOR
                        ;	CALLED USING BLWP @MONITOR
                        ;
  E6B8   0300 0000      INIT:	LIMI	0	 		;DISABLE
  E6BC   02E0 EEA0      	LWPI	WORKSP			;USE MONITOR LOCAL WORKSPACE
  E6C0   020A E5FE      	LI	R10,STACKP			;STACK FOR LOCAL MONITOR USE
                        ;
                        ;************************************************************
                        ;
                        ;	SWTICH TO MONITOR XOP VECTORS RATHER THAN TIMON ROM
                        ;	THIS MEANS THAT ALL PROGRAMMES THAT USE XOP WILL USE THE
                        ;	THE XOP IMPLEMENTATIONS DEFINED IN MONITOR THAT IS HERE!
                        ;
                        ;************************************************************
                        
  E6C4   0200 0008      	LI	R0,INTVEC		;SET UP INTERRUPT VECTORS
  E6C8   0201 E6AC      	LI	R1,INTTAB		;ONLY INT 2 TO 4 
  E6CC   1000           INT1:	NOP
  E6CE   CC31           	MOV	*R1+,*R0+
  E6D0   CC31           	MOV	*R1+,*R0+
  E6D2   0280 0014      	CI	R0,INTVEC+12
  E6D6   16FA           	JNE	INT1
  E6D8   0200 0040      	LI	R0,40H			;INITIALISE XOP-START AT XOP0
  E6DC   0201 E66C      	LI	R1,XOPTAB
  E6E0   1000           INIT2:	NOP				;WRITE PROTECT
  E6E2   CC31           	MOV	*R1+,*R0+
  E6E4   1000           	NOP				;WTRITE PROTECT
  E6E6   CC31           	MOV	*R1+,*R0+	
  E6E8   0280 0080      	CI	R0,80H			;FINISHED?
  E6EC   16F9           	JNE	INIT2			;NO
                        ;
  E6EE   2DA0 E6F4      	CALL	@WBOOT
  E6F2   0380           	RTWP
                        
                        ;
                        ;************************************************************
                        ;
                        ;	WARM BOOT ASSUMES A COLD BOOT HAS ALREADY OCCURED
                        ;	AND DISC IS JUST BEING CALIBRATED TO A KNOW STATE
                        ;
                        ;************************************************************
                        ;
  E6F4   0720 E642      WBOOT:	SETO	@TRACK			;INVALIDATE TRACK
  E6F8   04E0 E64C      	CLR	@SECTOR
  E6FC   04E0 E654      	CLR	@DRIVE
  E700   0202 0000      	LI	R2,0			;SELECT BOOT DRIVE
  E704   2DA0 E774      	CALL	@SELDSK			;SELECT DISK
  E708   2DA0 E832      	CALL	@RECAL			;RECAL
  E70C   2DC0           	RET				;RETURN FROM BLWP
                        ;
                        ;*********************************************************
                        ;
                        ;	BOOT ASSUMES NOTHING HAS BEEN INITIALISED THEREFORE IT
                        ;	MUST CALL MONITOR TO INITIALISE THE FDC AND INTERRUPT VECTORS ETC BY
                        ;	CALLING BLWP @MONITOR
                        ;
                        ;***********************************************************
                        ;
  E70E   02E0 E5DE      BOOT:	LWPI	BOOT_TWP		;WORKSP CAN'T BE THE SAME AS MONITOR THIS IS A TEMPORARY WORKSPACE
  E712   0420 E600      	BLWP	@MONORG		;PERFORM INITIALISATION AND WARM BOOT
  E716   020A E5DC      	LI	R10,BOOT_TWP-2	;JUST PUT THE TEMPOARY STACK ABOVE THE WORKSPACE
                        ;
                        ;---NOW TRY TO BOOT FROM TRACK 0 SECTOR 1
                        ;
  E71A   2FA0 E758      	MESG	@BMSG2
  E71E   04C2           	CLR	R2
  E720   2DA0 E774      	CALL	@SELDSK		;SELECT DRIVE A
  E724   160B           	JNE	BOOT2
  E726   2DA0 E832      	CALL	@RECAL		;RECAL DRIVE A
  E72A   0203 0001      	LI	R3,1		;BOOT SECTOR
  E72E   0204 C600      	LI	R4,LOADER		;USE THIS AREA TO BOOT
  E732   2DA0 E86A      	CALL	@RDREC
  E736   1602           	JNE	BOOT2
  E738   0460 C600      	B	@LOADER		;LET THERE BE LIFE - LOAD THE SYSTEM
                        ;
                        ; --BOOT ERROR
                        ;
  E73C   C801 E638      BOOT2	MOV	R1,@FDCSTATUS
  E740   2FA0 E748      	MESG	@BMSG1
  E744   0460 F000      	B	@TIMON
                        ;
  E748   2D2D 426F      BMSG1	TEXT	'--Boot error'
  E74C   6F74 2065      
  E750   7272 6F72      
  E754   0D0A 00        	BYTE	0DH,0AH,0
  E757   00             	EVEN
  E758   2D2D 426F      BMSG2	TEXT	'--Booting....'
  E75C   6F74 696E      
  E760   672E 2E2E      
  E764   2E             
  E765   0D0A 00        	BYTE	0DH,0AH,0
  E768                  	EVEN
                        
                        ;
                        ;****************************
                        ;
                        ; CHAR IN (MSB	OF R1)
                        ;
                        ;*****************************	
  E768   2F41           CIN	READ	R1	 		;GET CHAR
  E76A   2DC0           	RET
                        ;*******************************
                        ;
                        ;	CHAR OUT (MSB OF R2)
                        ;
                        ;********************************
                        ;
  E76C   04C1           COUT	CLR	R1
  E76E   D042           	MOVB	R2,R1	 		;COPY CHAR TO R1
  E770   2F01           	WRITE	R1	 		;OUTPUT IT
  E772   2DC0           	RET	 
                        ;
                        ;************************************************
                        ;
                        ;	SELECT THE DRIVE IN R2
                        ;
                        ;************************************************
                        ;
  E774   0282 0001      SELDSK:	CI	R2,1			;MAXIMUM NUMBER IS 2
  E778   1526           	JGT	SELRET
  E77A   2DA0 E7CC      	CALL	@DRVSEL			;SELECT THE DRIVE
  E77E   2DA0 E7E6      	CALL	@READY			;EMIT NEW SELECT BITS AND TEST READY
  E782   1621           	JNE	SELRET
  E784   C041           	MOV	R1,R1
  E786   161F           	JNE	SELRET			;NOT READY
  E788   C0E0 E654      	MOV	@DRIVE,R3			;SAVE LAST UNIT
  E78C   0A13           	SLA	R3,1			;TWO BYTES PER WORD
  E78E   C802 E654      	MOV	R2,@DRIVE			;NEW UNIT
  E792   C8E0 E642      	MOV	@TRACK,@TRKTAB(R3)		;STORE PREVIOUS DRIVES TRACK POSITION
  E796   E644           
  E798   C060 E652      	MOV	@DSKTYP,R1
  E79C   0241 0003      	ANDI	R1,00000011B
  E7A0   C8C1 E648      	MOV	R1,@TYPTAB(R3)		;STORE PREVIOUS DISK TYPE
  E7A4   020C 8002      	LI	PORT,TRKREG
  E7A8   0A12           	SLA	R2,1			;MULTIPLY BY 2, IE TWO BYTES PER WORD
  E7AA   C062 E644      	MOV	@TRKTAB(R2),R1		;GET LAST KNOWN HEAD POSITION FOR NEW DRIVE
  E7AE   C801 E642      	MOV	R1,@TRACK			;SAVE THE DRIVE'S NEW POSITION AND
  E7B2   06C1           	SWPB	R1
  E7B4   3081           	LDCR	R1,BYTEWIDE 		;OUTPUT TO THE 1797 FDC
  E7B6   C060 E652      	MOV	@DSKTYP,R1			;DENSITY BITS ETC
  E7BA   0241 00FC      	ANDI	R1,11111100B		;MERGE IN NEW DENSITY CONTROL BIT
  E7BE   E062 E648      	SOC	@TYPTAB(R2),R1
  E7C2   2DA0 EA36      	CALL	@SETDENS			;SET DENSITY CONTROL BIT
  E7C6   0420 E9FA      SELRET:	BLWP	@SETTIMER			;SET DRIVE TIMER
  E7CA   2DC0           	RET
                        ;
                        ;	OUTPUT SELECT BITS
                        ;
  E7CC   0242 0003      DRVSEL:	ANDI	R2,00000011B		;MAKE SURE IT'S IN RANGE	
  E7D0   D822 E7D8      	MOVB	@SELTAB(R2),@SELCPY		;STORE NEW STATE OF SELECT/MUX PORT
  E7D4   E662           
  E7D6   2DC0           	RET
                        ;
  E7D8   01             SELTAB:	BYTE	00000001B			;BITS FOR UNIT # 0
  E7D9   02             	BYTE	00000010B
  E7DA   04             	BYTE	00000100B
  E7DB   08             	BYTE	00001000B
                        ;
                        ; TURN OFF ALL DRIVES
                        ;
  E7DC   020C 0000      DESELECT: 	LI	PORT,SELMUX
  E7E0   04C0           	CLR	R0
  E7E2   3140           	LDCR	R0,00000101B		;CLEAR DISKS
  E7E4   2DC0           	RET
                        
                        ;
                        ;	EMIT MUX BITS AND SEE IF DRIVE IS READY
                        ;
  E7E6   0201 0001      READY:	LI	R1,1
  E7EA   C801 E664      	MOV	R1,@INUSE		;SET DISK-ACTIVE FLAG
  E7EE   020C 0000      	LI	PORT,SELMUX		;SELECT PORT
  E7F2   04C1           	CLR	R1
  E7F4   3141           	LDCR	R1,5		;CLEAR SELECT BITS FIRST
  E7F6   3160 E662      	LDCR	@SELCPY,5		;;OUTPUT CURRENT DRIVE SELECT/MUX BITS
  E7FA   C020 EB46      	MOV	@TIMEOUT,R0
  E7FE   0280 0001      	CI	R0,1
  E802   1605           	JNE	READY1
  E804   2DA0 E820      	CALL	@FORCE
  E808   0241 0080      	ANDI	R1,10000000B
  E80C   1606           	JNE	READY2
  E80E   2DA0 EA1A      READY1:	CALL	@WAITRDY
  E812   2DA0 E820      	CALL	@FORCE		;CLEAR CONTROLLER AND TEST DRIVE
  E816   0241 0080      	ANDI	R1,10000000B	;READY FLAG
  E81A   C801 E638      READY2:	MOV	R1,@FDCSTATUS
  E81E   2DC0           	RET
                        ;
                        ;
  E820   0201 00D0      FORCE:	LI	R1,FINTCMD		;FORCE INTERRUPT COMMAND
  E824   2DA0 EAC0      	CALL	@EXCMD
  E828   020C 8000      	LI	PORT,STSREG		;GET RESULT BYTE AS NO INTERRUPT
  E82C   3481           	STCR	R1,BYTEWIDE		;HAS OCCURRED
  E82E   0981           	SRL	R1,8
  E830   2DC0           	RET
                        ;
                        ;*****************************
                        ;
                        ;--RECAL IS JUST SEEK TO TRK ZERO (RECAL IS HANDLED THERE)
                        ;
                        ;*****************************
                        ;
  E832   0203 0000      RECAL:	LI	R3,0			;RECAL COMMAND
  E836   0720 E642      	SETO	@TRACK			;INVALIDATE TRACK SEEK WILL ZERO
  E83A   2DA0 EA5A      	CALL	@SEEK			;TRACK REGISTER IS ZEROED
  E83E   0241 0081      	ANDI	R1,10000001B
  E842   2DC0           	RET
                        ;
                        ;*******************************
                        ;
                        ;READ ID FIELDS
                        ;
                        ;******************************
                        ;
  E844   C804 E640      RDID	MOV	R4,@IOPTR
  E848   2DA0 E7E6      	CALL	@READY
  E84C   160B           	JNE	RDIDX
  E84E   0202 00C0      	LI	R2,RIDCMD
  E852   2DA0 E8DA      	CALL	@RDWRT			;READ ID RECORD INTO (R4)
  E856   1606           	JNE	RDIDX			;EXIT IF DISK ERROR
  E858   C120 E640      	MOV	@IOPTR,R4
  E85C   0224 0006      	AI	R4,6			;POINT TO 7TH BYTE AFTER ID RECORD
  E860   C520 E652      	MOV	@DSKTYP,*R4		;STORE DISK TYPE THERE
  E864   0420 E9FA      RDIDX	BLWP	@SETTIMER
  E868   2DC0           	RET
                        ;
                        ;****************************
                        ;
                        ;READ A RECORD
                        ; 	R3 HOLDS SECTOR
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E86A   C804 E640      RDREC:	MOV	R4,@IOPTR
  E86E   C803 E64C      	MOV	R3,@SECTOR
  E872   2DA0 E7E6      	CALL	@READY
  E876   1604           	JNE	RDRECX		;EXIT IF DRIVE NOT READY
  E878   0202 0088      	LI	R2,RDCMD		;DO A READ COMMAND
  E87C   2DA0 E8DA      	CALL	@RDWRT
  E880   0420 E9FA      RDRECX:	BLWP	@SETTIMER
  E884   2DC0           	RET			;BIND	*SP+ ;RET
                        ;****************************
                        ;
                        ;READ A TRACK
                        ; 	R3 NOT REQUIRED
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E886   C804 E640      RDTRK	MOV	R4,@IOPTR
  E88A   0203 0001      	LI	R3,1		;DUMMY
  E88E   C803 E64C      	MOV	R3,@SECTOR
  E892   2DA0 E7E6      	CALL	@READY
  E896   1604           	JNE	RDTRKX		;EXIT IF DRIVE NOT READY
  E898   0202 00E0      	LI	R2,RTCMD		;DO A READ COMMAND
  E89C   2DA0 E8DA      	CALL	@RDWRT
  E8A0   0420 E9FA      RDTRKX	BLWP	@SETTIMER
  E8A4   2DC0           	RET			;BIND	*SP+ ;RET;
                        ;
                        ;****************************
                        ;
                        ;WRITE A TRACK
                        ; 	R3 NOT REQUIRED
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E8A6   C804 E640      WRTRK	MOV	R4,@IOPTR
  E8AA   C803 E642      	MOV	R3,@TRACK
  E8AE   2DA0 E7E6      	CALL	@READY
  E8B2   16F6           	JNE	RDTRKX		;EXIT IF DRIVE NOT READY
  E8B4   0202 00F0      	LI	R2,WTCMD	;DO A WRITE COMMAND
  E8B8   2DA0 E8DA      	CALL	@RDWRT
  E8BC   0420 E9FA      WRTRKX	BLWP	@SETTIMER
  E8C0   2DC0           	RET			;BIND	*SP+ ;RET;
                        	;
                        ;******************************
                        ;
                        ;WRITE A RECORD
                        ; 	R3 HOLDS SECTOR
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E8C2   C804 E640      WRREC	MOV	R4,@IOPTR
  E8C6   C803 E64C      	MOV	R3,@SECTOR
  E8CA   2DA0 E7E6      	CALL	@READY
  E8CE   1604           	JNE	WRRECX
  E8D0   0202 00A8      	LI	R2,WRCMD
  E8D4   2DA0 E8DA      	CALL	@RDWRT
                        WRRECX	;BLWP	@SETTIMER
  E8D8   2DC0           	RET
                        ;
                        ; SECTOR TRANSLATE (NOT NEEDED ANYMORE MAY 2010)
                        ; SO  JUST RETURN
                        ;
                        ;SECTRAN	RET			;NOT NEEDED WITH IBM FORMATS
                        ;	ANDI	R3,000FH
                        ;	DEC	R3		; 0 -> 8
                        ;	AI	R3,SETTBL
                        ;	MOVB 	*R3,R0
                        ;	MOV	R0,R3
                        ;	SRL	R3,8
                        ;	RET
                        ;SETTBL	BYTE	1,4,7,2,5,8,3,6,9	;1,4,7,9,2,5,8,3,6
                        ;	EVEN
                        ;
                        ;
                        ;********************************
                        ;
                        ;	COMMON READ AND WRITE ROUTINE (RDWRT)
                        ;	ENTER WITH 
                        ;		R4 -> IO BUFFER
                        ;		R3 -> SECTOR
                        ;		R2 -> COMMAND TYPE
                        ;
                        ;	ASSUME THE CORRECT TRACK IS UNDER THE DISK HEAD
                        ;
                        ;	TREAT DRQINT AS A PSUEDO DMA CHANNEL
                        ;	BY LOADING THE PORT REGISTER(R12) WITH THE
                        ;	I/O ADDRESS AND THE TYPE OF OPERATION I.E. READ/WRITE
                        ;	THERE IS NO COUNT AS I RELY ON AN INTERRUPT FROM THE
                        ;	FDC1797 TO TERMINATE THE TRANSFER.
                        ;
                        ;*********************************
                        ;
                        RDWRT:	;LI	R0,6
                        	;MOV	R0,@07B0H+6
                        
  E8DA   C802 E650      	MOV	R2,@CMDTYP		;SAVE READ/WRITE/READID COMMAND
  E8DE   C820 E658      	MOV	@MAXRWT,@RWTRY	;SET READ/WRITE RETRY
  E8E2   E65A           
  E8E4   C0E0 E64C      RDWRT0:	MOV	@SECTOR,R3
  E8E8   020C 8004      	LI	PORT,SECREG		;FDC SECTOR REGISTER
  E8EC   06C3           	SWPB	R3
  E8EE   3083           	LDCR	R3,BYTEWIDE
                        ;
                        ;	SET UP PSUEDO DMA CHANNEL
                        ;
  E8F0   04C3           	CLR	R3			;INDEX POINTER
  E8F2   0200 8006      	LI	R0,DATREG		;FDC REG WHERE DATA IS
  E8F6   C800 EBE8      	MOV	R0,@DMAPORT
  E8FA   C820 E640      	MOV	@IOPTR,@DMAADDR		;DMA TRANSFER ADDRESS
  E8FE   EBE0           
  E900   C060 E650      	MOV	@CMDTYP,R1
  E904   0281 00A8      	CI	R1,WRCMD		;WRITE COMMAND ?
  E908   1307           	JEQ	RDWRT1			;YES
  E90A   0281 00F0      	CI	R1,WTCMD		;WRITE COMMAND ?
  E90E   1304           	JEQ	RDWRT1			;YES
  E910   C823 E634      	MOV	@CMDTBL(R3),@DMACMD	;EXECUTE A READ COMMAND (STCR)
  E914   EBE2           
  E916   1004           	JMP	RDWRT2
  E918   05C3           RDWRT1:	INCT	R3
  E91A   C823 E634      	MOV	@CMDTBL(R3),@DMACMD	;EXECUTE A WRITE COMMAND (LDCR)
  E91E   EBE2           
                        ;
                        ;
                        ;--MERGE SIDE BIT BEFORE COMMAND IS EXECUTED
                        ;
  E920   0281 00C0      RDWRT2:	CI	R1,RIDCMD		;IF ID CMD DON'T NEED TO MERGE
  E924   1304           	JEQ	RDWRT5
  E926   C020 E64E      	MOV	@SIDE,R0		;GET SIDE BIT
  E92A   0A10           	SLA	R0,1
  E92C   E040           	SOC	R0,R1		;OR IN SIDE BIT INTO COMMAND BYTE
  E92E   2DA0 EAC0      RDWRT5:	CALL	@EXCMD
  E932   0241 00DF      	ANDI	R1,11011111B	;MASK READY/WRITEPROTECT/RNF/CRC/OVERRUN/DRQ/BUSY
  E936   130C           	JEQ	RDWRT4		;RETURN IN NO DISK IO ERROR
                        
                        DSKERR:	;LI	R0,8
                        	;MOV	R0,@07B0H+8
                        
  E938   C801 E65C      	MOV	R1,@ERRTYP
  E93C   2DA0 E952      	CALL	@RECOVER		;DO READ/WRITE ERROR RECOVERY
  E940   1603           	JNE	RDWRT3		;DON'T RETRY IF UN-RECOVERABLE ERROR
  E942   0620 E65A      	DEC	@RWTRY		;ELSE DECREMENT AND KEEP TRYING UNTIL 0
  E946   16CE           	JNE	RDWRT0
  E948   C060 E65C      RDWRT3:	MOV	@ERRTYP,R1
  E94C   0460 EAEE      	B	@IOERR
  E950   2DC0           RDWRT4:	RET
                        ;
                        ;***************************************
                        ;
                        ;	ATTEMPT TO RECOVER FROM A READ WRITE
                        ;	ERROR
                        ;
                        ;****************************************
                        ;
  E952   C081           RECOVER	MOV	R1,R2			;COPY ERROR CODE TO R2
  E954   0242 0087      	ANDI	R2,10000111B		;ISOLATE REAY/OVERRUN/DRQ/BUSY ERRORS
  E958   1305           	JEQ	RECOV1			;JUMP IF NONE OF THOSE SET
  E95A   C081           	MOV	R1,R2
  E95C   2DA0 E820      	CALL	@FORCE			;CLEAR ERROR FLAGS IN 1797
  E960   C042           	MOV	R2,R1
  E962   2DC0           RECOV0	RET
                        ;
                        ;	ARRIVE HERE IF CRC OR RNF ERROR
                        ;
  E964   C081           RECOV1	MOV	R1,R2
  E966   0242 0010      	ANDI	R2,00010000B		;SECTOR ID NOT FOUND
  E96A   1304           	JEQ	STEP
  E96C   0242 0020      	ANDI	R2,00100000B		;RNF ERROR
  E970   1318           	JEQ	RECOV3
  E972   2DC0           	RET				;PROCESS ID NOT FOUND ERROR
                        ;
                        ;	ARRIVE HERE ON BAD CRC IN DATA OR ID FIELD
                        ;
  E974   8820 E65A      STEP:	C	@RWTRY,@MAXRWT		;CHECK FOR FIRST TIME
  E978   E658           
  E97A   13F3           	JEQ	RECOV0
  E97C   0201 005C      	LI	R1,SICMD			;STEP BACK AND FORTH
  E980   2DA0 EAC0      	CALL	@EXCMD
  E984   0201 005C      	LI	R1,SICMD			;STEP IN TWO TRACKS THEN BACK
  E988   2DA0 EAC0      	CALL	@EXCMD
  E98C   0201 007C      	LI	R1,SOCMD
  E990   2DA0 EAC0      	CALL	@EXCMD
  E994   0201 007C      	LI	R1,SOCMD
  E998   2DA0 EAC0      	CALL	@EXCMD
  E99C   2DA0 E9C4      	CALL	@VERIFY
  E9A0   2DC0           	RET				;RETURN WITH STATUS IN R1
                        ;
                        ;	ARRIVE HERE IF RNF ERROR
                        ;
  E9A2   2E20 E652      RECOV3 	PUSH	@DSKTYP			;SAVE DENSITY CONTROL BYTE
  E9A6   2DA0 E9C4      	CALL	@VERIFY			;TRACK VERIFY USING READ - ID
  E9AA   2E43           	POP	R3			;KEEP PREVIOUS DENSITY BYTE HERE
  E9AC   1301           	JEQ	RECOV4			;RETURN IF NO ID MARK FOUND
  E9AE   2DC0           	RET
                        ;
  E9B0   80E0 E652      RECOV4	C	@DSKTYP,R3		;SEE IF DENSITY WAS CHANGED BY 'VERIFY'
  E9B4   1303           	JEQ	RECOV5			;AND EXIT WITH RNF IF NOT
  E9B6   04C1           	CLR	R1
  E9B8   C041           	MOV	R1,R1			;CLEAR R1 TO INDICATE A RETRY SHOULD BE
  E9BA   2DC0           	RET				;DONE NOW THAT DENSITY IS RIGHT
                        ;
  E9BC   0201 0010      RECOV5	LI	R1,00010000B             ;HEX 0010H
  E9C0   C041           	MOV	R1,R1			;INDICATE ERROR DUE TO NON-EXISTENT
  E9C2   2DC0           	RET				; SECTOR OR INDETERMINATE TRACK
                        ;
                        ; VERIFY WE ARE TRACK
                        ;
  E9C4   0201 00C0      VERIFY	LI	R1,RIDCMD
  E9C8   2DA0 EAC0      	CALL	@EXCMD			;READ NEXT ID-MARK TO VERIFY SEEK
  E9CC   0241 0099      	ANDI	R1,10011001B
  E9D0   1308           	JEQ	VERFY2			;JUMP IF ID MARK READ SUCCESSFULLY
  E9D2   2DA0 EA48      	CALL	@FLIPDENS			;ELSE SWITCH DISK DENSITY CONFIGURATION
  E9D6   0201 00C0      	LI	R1,RIDCMD
  E9DA   2DA0 EAC0      	CALL	@EXCMD			;TRY AGAIN
  E9DE   0241 0099      	ANDI	R1,10011001B
  E9E2   C141           VERFY2	MOV	R1,R5			;SAVE STATUS OF READ-ID COMMAND
  E9E4   2DA0 E820      	CALL	@FORCE			;CLEAR OVERRUN AND DRQ BITS IN 1797
  E9E8   C045           	MOV	R5,R1
  E9EA   1601           	JNE	VERFY3			;RETURN IF ID MARK WAS FOUND
  E9EC   2DC0           	RET
  E9EE   2DA0 EA36      VERFY3	CALL	@SETDENS			;ELSE GO BACK TO ORIGINAL DENSITY
  E9F2   C045           	MOV	R5,R1			;RETURN WITH ERROR INDICATED
  E9F4   2DC0           	RET
                        ;
                        ;********************************
                        ;
                        ;INTIALISE	INT.VECTORS	ETC	
                        ;
                        ;*******************************
                        ;
  E9F6   2DC0           INTSYS	RET
                        ;
                        ;********************************
                        ;
                        ;RESET	FDC
                        ;
                        ;********************************
                        ;
  E9F8   2DC0           RSET	RET
                        ;
                        ;
                        ;*******************************************
                        ;
                        ; 	SET THE TIME OUT TIMER
                        ;
                        SETTIMER 
  E9FA   EBF0 E9FE      	WORD	INTWP4,SETTIMER+4
  E9FE   020C 0080      	LI	PORT,0080H
  EA02   1E14           	SBZ	20			;RESET INTERRUPT
  EA04   0208 00C8      	LI	R8,200			; 200 X 16MS = 7.0SEC
  EA08   C808 EB46      	MOV	R8,@TIMEOUT
  EA0C   1E0E           	SBZ	14
  EA0E   1D0D           	SBO	13			;LOAD INTERVAL TIMER ONLY
  EA10   3220 EA18      	LDCR	@INTLV2,8
  EA14   1D14           	SBO	20			;ENABLE INTERRUPT
  EA16   0380           	RTWP
                        ;
  EA18   FF             INTLV2	BYTE	255			;16.0 MILLISECONDS
  EA19   00             	EVEN
                        ;
                        ;ALLOW TIME FOR USER TO INSERT DISC (IN FUTURE MAY INCREASE THE TIMEOUT)
                        ;
                        WAITRDY:
  EA1A   2DA0 E820      	CALL	@FORCE
  EA1E   020C 8000      	LI	PORT,STSREG
  EA22   0720 E660      	SETO	@DRVRDY			 ;ALLOWS US TO TIMEOUT
                        ;
                        WAITRDY1:
  EA26   3480           	STCR	R0,BYTEWIDE
  EA28   0240 8000      	ANDI	R0,8000H
  EA2C   1303           	JEQ	WAITRDY2
                        ;
                        ;	WAIT FOR 32uS FOR DRIVE TO BECOME READY
                        ;
  EA2E   0620 E660      	DEC	@DRVRDY
  EA32   16F9           	JNE	WAITRDY1
                        WAITRDY2:
  EA34   2DC0           	RET
                        ;
                        ;******************************************
                        ;
                        ;	SET DENSITY BIT 
                        ;
                        ;******************************************
                        ;
  EA36   C801 E652      SETDENS:	MOV	R1,@DSKTYP
  EA3A   020C 000A      	LI	PORT,TYPMUX
  EA3E   06C1           	SWPB	R1
  EA40   3081           	LDCR	R1,2		;OUTPUT CONTROL BITS
  EA42   04C1           	CLR	R1
  EA44   C041           	MOV	R1,R1
  EA46   2DC0           	RET
                        
                        	;
                        ;******************************************
                        ;
                        ;	FLIP DENSITY BIT
                        ;
                        ;******************************************
                        ;
  EA48   C801 E652      FLIPDENS:	MOV	R1,@DSKTYP
  EA4C   020C 000A      	LI	PORT,TYPMUX
  EA50   06C1           	SWPB	R1
  EA52   3001           	LDCR	R1,0		;OUTPUT CONTROL BITS
  EA54   04C1           	CLR	R1
  EA56   C041           	MOV	R1,R1
  EA58   2DC0           	RET
                        ;
                        ;;*******************************************
                        ;
                        ;	SEEK TO THE TRACK NUMBER HELD IN R3
                        ;
                        ;	DRIVE # IS IN DRIVE
                        ;
                        ;********************************************
                        ;
  EA5A   2DA0 E7E6      SEEK:	CALL	@READY		;SEE IF DRIVE IS READY FIRST
  EA5E   162E           	JNE	SEEKX		;ERROR CONDITION IN OPSTAT
  EA60   04E0 E64E      	CLR	@SIDE		;ASSUME SIDE 0		
  EA64   0C0A 0003      	TCMB	R3,0		;TEST AND CLEAR MSB
  EA68   02CF           	STST	ST
  EA6A   1602           	JNE	SEEK0		;SIDE 0
  EA6C   05A0 E64E      	INC	@SIDE		;SIDE 1
  EA70   8803 E642      SEEK0:	C	R3,@TRACK		;ARE WE ALREADY THERE ?
  EA74   1323           	JEQ	SEEKX		;STAT WILL SHOW OKAY
  EA76   C060 E642      	MOV	@TRACK,R1
  EA7A   0281 FFFF      	CI	R1,-1		;IF NOT KNOWN TRACK RECAL DRIVE
                        ;	JNE	SEEK3
  EA7E   04E0 E64E      	CLR	@SIDE		;ASSUME SIDE 0
  EA82   0201 000C      	LI	R1,RSTCMD
  EA86   2DA0 EAC0      	CALL	@EXCMD		;EXECUTE RESTORE COMMAND AT SLOWEST STEP SPEED
  EA8A   0200 0004      	LI	R0,00000100B	;TRK00 BIT
  EA8E   2840           	XOR	R0,R1		;MAKE TRK00 BIT TRUE
  EA90   0241 0085      	ANDI	R1,10000101B	;NOT FOUND AND NOT READY BITS
  EA94   1613           	JNE	SEEKX		;EXIT IF RESTORE CANNOT BE DONE
                        
  EA96   008F           SEEK2:	LST	ST
  EA98   1602           	JNE	SEEK3
  EA9A   05A0 E64E      	INC	@SIDE
                        
  EA9E   C803 E642      SEEK3:	MOV	R3,@TRACK
  EAA2   020C 8006      	LI	PORT,DATREG		;ALSO PUT IN 179X TRACK REGISTER
  EAA6   06C3           	SWPB	R3
  EAA8   3083           	LDCR	R3,BYTEWIDE		;OUTPUT TO FDC PORT
  EAAA   0201 001C      	LI	R1,SEKCMD
  EAAE   2DA0 EAC0      	CALL	@EXCMD
  EAB2   0241 0090      	ANDI	R1,10010000B	;NOT FOUND & NOT READY ERROR
  EAB6   1302           	JEQ	SEEKX
  EAB8   0720 E642      	SETO	@TRACK
                        
                        SEEKX:
  EABC   C041           	MOV	R1,R1		;INDICATE RESULT TYPE
  EABE   2DC0           	RET
                        ;
                        ;
                        ;RETURN WITH COMPLETION STATUS IN ACC
                        ;
                        ;	EXECUTE THE COMMAND IN REGISTER R1
                        ;
                        ;
  EAC0   0300 0003      EXCMD:	LIMI	3		;DISABLE INTERRUPTS
  EAC4   020C 8000      	LI	PORT,CMDREG
  EAC8   06C1           	SWPB	R1
  EACA   3081           	LDCR	R1,BYTEWIDE		;OUTPUT CONTROLLER COMMAND
                        ;	LIMI	3		;ENABLE FDC INTERRUPTS ONLY
  EACC   0200 0028      	LI	R0, 40		;DELAY AROUND 60uS BEFORE READING STATUS
  EAD0   0600           EXCMD1:	DEC	R0
  EAD2   16FE           	JNE	EXCMD1
  EAD4   0281 D000      	CI	R1,FINTCMD*256	;IF FORCE INTERRUPT EXIT
  EAD8   1307           	JEQ	EXCMD3
                        ;	CI	R1,RDCMD*256
                        ;	JNE	EXT
                        ;
                        ;--WHEN THE FDC COMPLETION INTERRUPT ROUTINE IS ENTERED THIS TEMPORARY
                        ;  HALT INSTRUCTION WILL BE BYPASSED
                        ;
  EADA   0720 E65E      	SETO	@OPCOMP
  EADE   C060 E65E      EXCMD4A	MOV	@OPCOMP, R1		;TIMEOUT WILL ALSO CLEAR THIS
  EAE2   16FD           	JNE	EXCMD4A		;USE FDCINT TO BUMP PAST THIS ADDRESS
  EAE4   C060 E638      	MOV	@FDCSTATUS,R1		;STATUS REGISTER RESULT
  EAE8   0300 0004      EXCMD3	LIMI	4		;THIS ENABLES TIMER INTERRUPT
  EAEC   2DC0           	RET
                        ;
                        ;************************************************
                        ;
                        ;WRITE	ERROR	MESSAGE
                        ;
                        ;**************************************************
                        ;
  EAEE   2FA0 EB68      IOERR:	MESG	@ERRMSG	
  EAF2   2E81           	WHEX	R1	 		;O/P TYPE
  EAF4   2FA0 EB93      	MESG	@DRVMSG			;DISK MESSAGE
  EAF8   2EA0 E654      	WHEX	@DRIVE			;DRV #
  EAFC   2FA0 EB9C      	MESG	@TRKMSG			;TRACK #
  EB00   2EA0 E642      	WHEX	@TRACK
  EB04   2FA0 EBA5      	MESG	@SECTMSG	 	;SECTOR MESSAGE
  EB08   2EA0 E64C      	WHEX	@SECTOR			;SECTOR #
  EB0C   0701           	SETO	R1
  EB0E   2DC0           	RET
                        ;	B	@TIMON			;FATAL 
                        ;
                        ;
                        ;******************************
                        ;
                        ;	MAIN INTERRUPT ROUTINES
                        ;
                        ;********************************
                        ;
  EB10   020C 8000      INTREQ 	LI	PORT,STSREG
  EB14   04C8           	CLR	R8
  EB16   3488           	STCR	R8,BYTEWIDE
  EB18   06C8           	SWPB	R8
  EB1A   C808 E638      	MOV	R8,@FDCSTATUS		;SHOW RESULT OF OPERATION
  EB1E   100E           	JMP	INTREQ1
                        	
                        ;CHECK TRACK REGISTER
  EB20   020C 8002      	LI	PORT,TRKREG
  EB24   04C8           	CLR	R8
  EB26   3488           	STCR	R8,BYTEWIDE
  EB28   06C8           	SWPB	R8
  EB2A   C808 E63C      	MOV	R8,@TRKSTAT
                        ;CHECK SECTOR REGISTER
  EB2E   020C 8004      	LI	PORT,SECREG
  EB32   04C8           	CLR	R8
  EB34   3488           	STCR	R8,BYTEWIDE
  EB36   06C8           	SWPB	R8
  EB38   C808 E63E      	MOV	R8,@SECSTAT	
  EB3C   04E0 E65E      INTREQ1	CLR	@OPCOMP		;SHOW THAT THE INTERRUPT WAS EXECUTED
  EB40   0380           	RTWP
                        ;
                        ;***********************************
                        ;
                        ;	THIS INTERRUPT SIMULATES DMA CONTROL
                        ;	ORGANISED AS FOLLOWS:
                        ;
                        ;	R9 HOLDS CURRENT COMMAND I.E. STCR OR LDCR
                        ;	R8 HOLDS THE CURRENT DMA ADDRESS.
                        ; 	R12 HOLDS THE CURRENT IO PORT - GENERALLY DATREG
                        ;
  EB42   0489           INTDRQ	X	R9		;EXECUTE THE COMMAND SPECIFIED BY RDWRT
  EB44   0380           	RTWP
                        ;
                        ;*********************************************************************
                        ;
                        ;	THIS INTERRUPT IS CONTROLED BY THE TIMER
                        ;
                        ;**********************************************************************
                        ;
  EB46   0001           TIMEOUT	WORD 	1		;N * 16MS DURATION
                        INTTIMER 	
  EB48   020C 0080      	LI	PORT,0080H
  EB4C   1F19           	TB	25
  EB4E   160B           	JNE	TIME2
  EB50   1D14           	SBO	20		;RESET INTERRUPT
  EB52   0620 EB46      	DEC	@TIMEOUT
  EB56   1607           	JNE	TIME2
  EB58   05A0 EB46      	INC	@TIMEOUT
  EB5C   1E14           	SBZ	20		;DISABLE TIMER
  EB5E   020C 0000      	LI	PORT,SELMUX
  EB62   04C8           	CLR	R8
  EB64   3148           	LDCR	R8,5		;CLEAR DISKS
  EB66   0380           TIME2	RTWP
                        ;
                        ;***********************************************************************
                        ;
                        ;	MESSAGES
                        ;
                        ;************************************************************************
                        ;
  EB68   0D0A 20        ERRMSG	BYTE	0DH,0AH,20H
  EB6B   4644 4320      	TEXT	'FDC error type: '
  EB6F   6572 726F      
  EB73   7220 7479      
  EB77   7065 3A20      
  EB7B   00             	BYTE	0
  EB7C   0D0A 20        STKMSG	BYTE	0DH,0AH,20H
  EB7F   5374 6163      	TEXT	'Stack overflow at: '
  EB83   6B20 6F76      
  EB87   6572 666C      
  EB8B   6F77 2061      
  EB8F   743A 20        
  EB92   00             	BYTE	0
  EB93   2044 7269      DRVMSG	TEXT	' Drive: '
  EB97   7665 3A20      
  EB9B   00             	BYTE	0
  EB9C   2054 7261      TRKMSG	TEXT	' Track: '
  EBA0   636B 3A20      
  EBA4   00             	BYTE	0
  EBA5   2053 6563      SECTMSG	TEXT	' Sector: '
  EBA9   746F 723A      
  EBAD   20             
  EBAE   00             	BYTE	0
                        ;
                        ;***************************************************************************
                        ;
                        ;	ALL XOP's AND WORKSPACES ARE DEFINED IN THIS SECTION AND ARE USED BY ALL PROGRAMMES
                        ;	THAT INTERACT WITH THE MONITOR ROUTINES
                        ;
                        ;	NOTES.
                        ;		1. ALL INTWP'S AND XOPWP'S OVERLAP AND SO ANY INT OR XOP
                        ;	      	   FUNCTIONS MAY ONLY USE REGISTERS R8-R10. REGISTERS R11
                        ;	      	   TO R15 ARE RESERVED FOR XOP & INT LINKAGES.
                        ;
                        ;		2. THE XOP WORKSPACES ARE JUST FOR MANAGING THE STACK AND CONTEXT
                        ;		   CALLS THE ORIGINAL WP IS PRESERVED AFTER THE CALL, WHICH MEANS
                        ;		   THAT CALLING ROUTINES SHARE THE SAME REGISTERS.
                        ;
                        ;		3. EVEN THOUGH R9 & R10 ARE GENERALLY USED AS STACK REGISTERS
                        ;		   THIS DOES NOT APPLY IN INTERRUPT WORKSPACE WHERE THEY CAN'T
                        ;		   BE USED FOR THAT PURPOSE - SIMPLY BECAUSE THE STACK POINTER 
                        ;		   IS NOT PASSED TO THE NEW WORKSPACE.  THEY CAN BE COPIED USING
                        ;		   THE R13 INDEX IF NEEDED AS R13 POINTS TO THE CALLING ROUTINE'S WORKSPACE
                        ;
                        ;*****************************************************************************
                        ;
  EBAF   00             	EVEN
  EBB0                  INTWP0	EQU	$ + 0		;INTERRUPT WORKSPACE
  EBC0                  INTWP1	EQU	INTWP0+16		;ONLY 7 ALLOWED
  EBD0                  INTWP2	EQU	INTWP1+16
  EBE0                  INTWP3	EQU	INTWP2+16
  EBF0                  INTWP4	EQU	INTWP3+16
  EC00                  INTWP5	EQU	INTWP4+16
  EC10                  INTWP6	EQU	INTWP5+16
  EC20                  INTWP7	EQU	INTWP6+16
                        ;
                        ;    NOW XOP'S
                        ;
  EC30                  XOPWP0	EQU	INTWP7+16
  EC40                  XOPWP1	EQU	XOPWP0+16
  EC50                  XOPWP2	EQU	XOPWP1+16
  EC60                  XOPWP3	EQU	XOPWP2+16
  EC70                  XOPWP4	EQU	XOPWP3+16
  EC80                  XOPWP5	EQU	XOPWP4+16
  EC90                  XOPWP6	EQU	XOPWP5+16
  ECA0                  XOPWP7	EQU	XOPWP6+16
  ECB0                  XOPWP8	EQU	XOPWP7+16
  ECC0                  XOPWP9	EQU	XOPWP8+16
  ECD0                  XOPWP10	EQU	XOPWP9+16
  ECE0                  XOPWP11	EQU	XOPWP10+16
  ECF0                  XOPWP12	EQU	XOPWP11+16
  ED00                  XOPWP13	EQU	XOPWP12+16
  ED10                  XOPWP14	EQU	XOPWP13+16
  ED20                  XOPWP15	EQU	XOPWP14+16
                        ;
  ED40                  	AORG	XOPWP15+32
                        
                        ;
                        ;
                        ;	DEFINE ALL THE XOP ROUTINES
                        ;
  ED40   0380           XOP0	RTWP
  ED42   0380           XOP1	RTWP
  ED44   0380           XOP2	RTWP
  ED46   0380           XOP3	RTWP
                        ;XOP15	RTWP
                        ;
  0080                  CRUBAS	EQU	80H			;TMS9902 CRU BASE
                        ;
                        ;**********************************************
                        ; PUSH REGISTERS R0 to RN ONTO THE STACK
                        ;*********************************************
                        ;
                        XOP4	
  ED48   C20D           	MOV	R13,R8			;GET THE EFFECTIVE ADDRESS OF CALLING WORKSPACE
  ED4A   C2AD 0014      	MOV	@2*R10(R13),R10		;GET SYSTEM STACK POINTER
  ED4E   064A           XOP4A	DECT	R10			;DECREMENT STACK POINTER
                        ;	C	R10,@2*R9(R13)		;CHECK FOR OVERFLOW
                        ;	JLE	STACKERR
  ED50   C6B8           	MOV	*R8+,*R10
  ED52   82C8           	C	R8,R11			;KEEP PUSHING REGISTERS (R11 HOLDS EFFECTIVE ADDRESS OF REGISTER RN)
  ED54   12FC           	JLE	XOP4A	
  ED56   CB4A 0014      	MOV	R10,@2*R10(R13)		;UPDATE THE STACK POINTER 
  ED5A   0380           	RTWP
                        ;
                        ;***********************************************
                        ; POPS REGISTERS R0 to RN OFF THE STACK
                        ;************************************************
                        ;
  ED5C   C2AD 0014      XOP5	MOV	@2*R10(R13),R10		;GET STACK POINTER
  ED60   C6FA           XOP5A	MOV	*R10+,*R11		;GET FIRST REGISTER
  ED62   064B           	DECT	R11			;DECT TWO EFFECTIVE ADDRESS, IE RN
  ED64   834B           	C	R11,R13			;COMPARE AGAINST WORKSPACE TOP ADDRESS IE R0
  ED66   14FC           	JHE	XOP5A
  ED68   CB4A 0014      	MOV	R10,@2*R10(R13)
  ED6C   0380           	RTWP
                        
                        ;
                        ;
                        ;************************************************
                        ;	CALL A SUBROUTINE
                        ;	CALLING METHOD:   CALL SUBROUTINE_ADDRESS
                        ;*************************************************
                        ;
  ED6E   C2AD 0014      XOP6	MOV	@2*R10(R13),R10 		;GET STACK POINTER
  ED72   064A           	DECT	R10
                        ;	C	R10,@2*R9(R13)		;CHECK FOR STACK OVERFLOW
                        ;	JLE	STACKERR			;O/P STACK OVERFLOW MESSAGE
  ED74   C68E           	MOV	R14,*R10			;PUSH SAVED PC ONTO STACH
                        ;	ANDI	R14,1			;CHECK FOR ODD
                        ;	JNE    	ODDMSG
  ED76   C38B           	MOV	R11,R14			;MOVE EA INTO R14 FOR CALL
  ED78   CB4A 0014      	MOV	R10,@2*R10(R13)		;UPDATE STACK POINTER
  ED7C   0380           	RTWP
                        ;
                        ;============================================
                        ;	SUBROUTINE RETURN
                        ;	CALLING METHOD:	RET
                        ;============================================
                        ;
  ED7E   C2AD 0014      XOP7	MOV	@2*R10(R13),R10		;GET STACK POINTER
  ED82   C3BA           	MOV	*R10+,R14			;MOVE EA INTO R14 FOR CALL
  ED84   CB4A 0014      	MOV	R10,@2*R10(R13)		;GET UPDATED STACK POINTER
  ED88   0380           	RTWP				;RETURN
                        ;
                        ;*************************************************
                        ;	PUSH DATA/REGISTER ONTO THE STACK
                        ;	USES CALLER'S WP AND STACK POINTERS
                        ;*************************************************
                        ;
                        XOP8	;MOV	@FREEMEM,@2*R9(R13)	;UPDATE FREE MEMORY POINTER IE STACK LIMIT
  ED8A   C2AD 0014      	MOV	@2*R10(R13),R10
  ED8E   064A           	DECT	R10
                        ;	C	R10,@2*R9(R13)		;CHECK FOR OVERFLOW
                        ;	JLE	STACKERR
  ED90   C69B           	MOV	*R11,*R10
  ED92   CB4A 0014      	MOV	R10,@2*R10(R13)
  ED96   0380           	RTWP
                        ;
                        ;	POP DATA/REGISTER OFF STACK
                        ;
  ED98   C2AD 0014      XOP9	MOV	@2*R10(R13),R10
  ED9C   C6FA           	MOV	*R10+,*R11
  ED9E   CB4A 0014      	MOV	R10,@2*R10(R13)
  EDA2   0380           	RTWP
                        ;
                        ;=====================================================
                        ;	WRITE A HEX CHARACTER
                        ;
                        ;	CALLING METHOD:   WHEX RN
                        ;
                        ;	FUNCTION: WRITE CONTENTS OF RN AS 4 HEX DIGITS 
                        ;========================================================
                        ;
  EDA4   C31B           XOP10	MOV	*R11,R12		;GET VALUE
  EDA6   0209 0004      	LI 	R9,4			;SET COUNTER TO 4 DIGITS
                        ;
  EDAA   C20C           XOP10A	MOV	R12,R8			;MOVE 4 DIGITS INTO R8R 	
  EDAC   09C8           	SRL	R8,12			;ISOLATE HEX DIGIT
  EDAE   0A88           	SLA	R8,8			;BYTE ALIGN1
  EDB0   0288 0900      	CI	R8,0900H		;IS THIS NUMERIC
  EDB4   1202           	JLE	XOP10B			;YES
  EDB6   0228 0700      	AI	R8,0700H		;ALPHA ADJUST
                        ;
  EDBA   0228 3000      XOP10B	AI	R8,'0'*256		;NUMERIC TO ASCII
  EDBE   2F08           	WRITE	R8			;O/P THE HEX DIGIT
  EDC0   0BCC           	SRC	R12,12			;ALIGN NEXT DIGIT
  EDC2   0609           	DEC	R9			;IF FINISHED EXIT
  EDC4   16F2           	JNE	XOP10A
  EDC6   0380           	RTWP
                        ;
                        ;===========================================================
                        ;	READ IN A 16 BIT HEX CHARACTER
                        ;
                        ;	CALL:   RHEX RN
                        ;
                        ;	FUNCTION: READ  CONTENTS INTO  RN AS 4 HEX DIGITS 
                        ;============================================================
                        ;
  EDC8   04CC           XOP11	CLR	R12			;CLEAR ACCUMULATOR
  EDCA   2F4A           XOP11A	READ	R10			;GET AN INPUT CHARACTER
  EDCC   2F0A           	WRITE	R10			;ECHO THE CHARACTER
                        ;
                        ;	CHECK FOR VALID HEX INPUT
                        ;
  EDCE   028A 3000      XOP11B	CI	R10,'0'*256		;BELOW MIN NUMERIC ?
  EDD2   1A10           	JL	NOTHEX			;IF YES, JUMP
  EDD4   028A 3900      	CI	R10,'9'*256		;ABOVE MAX NUMERIC ?
  EDD8   1208           	JLE	GOTONE			;IF NO, JUMP
  EDDA   028A 4100      	CI	R10,'A'*256		;BELOW MIN ALPHA ?
  EDDE   1A0A           	JL	NOTHEX			;IF YES JUMP
  EDE0   028A 4600      	CI	R10,'F'*256		;ABOVE MAX ALPHA ?
  EDE4   1B07           	JH	NOTHEX			;IF YES, JUMP
  EDE6   022A 0900      	AI	R10,0900H		;ALPHA ADJUST
  EDEA   0A4A           GOTONE	SLA	R10,4			;ISOLATE DIGIT
  EDEC   09CA           	SRL	R10,12			;WORD ALIGN DIGIT
                        ;
                        ;
                        ; DIGIT TO ACCUMULATOR
                        ;
  EDEE   0A4C           	SLA	R12,4		;MAKE ROOM FOR NEW DIGIT
  EDF0   A30A           	A	R10,R12		;ADD NEW DIGIT IN
  EDF2   10EB           	JMP	XOP11A		;GO GET NEXT DIGIT
  EDF4   C6CC           NOTHEX	MOV	R12,*R11		;RETURN THE VALUE
  EDF6   0380           	RTWP
                        ;
                        ;==================================================
                        ;	WRITE A CHARACTER
                        ;==================================================
                        ;
  EDF8   020C 0080      XOP12	LI	R12,CRUBAS
  EDFC   1D10           	SBO	16
  EDFE   1F16           XOP12A	TB	22
  EE00   16FE           	JNE	XOP12A
  EE02   321B           	LDCR	*R11,8
  EE04   1E10           	SBZ	16
  EE06   0380           	RTWP
                        ;
                        ;====================================================
                        ;	READ CHARACTER INTO LEFT BYTE (MSB)
                        ;====================================================
                        ;
  EE08   020C 0080      XOP13	LI	R12,CRUBAS
  EE0C   1F15           XOP13A	TB	21		;RECEIVE BUFFER REG FULL ?
  EE0E   16FE           	JNE	XOP13A		;NO
  EE10   04DB           	CLR	*R11
  EE12   361B           	STCR	*R11,8
  EE14   1E12           	SBZ	18		;SHOW WE RECEIVED CHARACTER
  EE16   0380           	RTWP
                        ;
                        ;=========================================================
                        ;
                        ;	OUTPUT A NULL TERMINATED STRING
                        ;
                        ;==========================================================
                        ;
  EE18   D33B           XOP14	MOVB	*R11+,R12	;GET THE CHARACTER
  EE1A   1302           	JEQ	XOP14A		;IF ZERO EXAT
  EE1C   2F0C           	WRITE	R12
  EE1E   10FC           	JMP	XOP14		;RETURN
  EE20   0380           XOP14A	RTWP
                        
                        ;=================================================
  EE22                  	EVEN
  EE22   2B             PLUS	TEXT	'+'
  EE23   00             	BYTE	0
  EE24   2E             DOT	TEXT	'.'
  EE25   00             	BYTE	0
  EE26                  	EVEN
                        ;
                        ;
                        ;************************************************
                        ;	DEBUG AND TRACING INFORMATION
                        ;	STORE DEBUG TRACE DATA IF DEBUG_FLAG IS SET
                        ;
                        ;*************************************************
                        ;
  EE26   C220 EEF0      XOP15:	MOV	@TRACER_INDEX,R8
  EE2A   0228 EEF2      	AI	R8,TRACER_LIST		;THIS IS THE INDEX INTO THE LIST
  EE2E   C60B           	MOV	R11,*R8			;SAVE THE CURRENT TRACE POINTER IN THE LIST
                        ;	INCT	@TRACER_INDEX		;MAYBE USE THIS LATER TO STORE A SEQUENCE AND PRINT OUT LATER
                        ;
                        ; 	NOW SAVE THE TRACE DATA
                        ;
                        
  EE30   CECE           	MOV	R14,*R11+			;STORE PROGRAMME COUNTER FIRST
  EE32   CECF           	MOV	R15,*R11+			;STORE STATUS FIRST
  EE34   0208 0010      	LI	R8,16			;16 REGISTERS
  EE38   CEFD           XOP_LOOP:	MOV	*R13+,*R11+			;COPY REGISTERS
  EE3A   0608           	DEC	R8
  EE3C   16FD           	JNE	XOP_LOOP
  EE3E   022D FFE0      	AI	R13,-32			;RESTOR WORKSPACE REGISTER LOCATION
  EE42   1000           	JMP	REGIST
                        ;	RTWP
                        
                        ;
                        ; INSTRUCTION PRINT OUT REGISTERS
                        ;
  EE44   04C8           REGIST:	CLR	R8		;START WITH INDEX = 0
  EE46   C248           	MOV	R8,R9
  EE48   0229 EEF2      	AI	R9,TRACER_LIST		;THIS IS THE STARTING ADDRESS
  EE4C   C259           	MOV	*R9,R9		;GET ADDRESS
                        
  EE4E   2FA0 E666      REGIST0: 	MESG	@CRLF		;PRINT INDENTATION
  EE52   2FA0 EEC8      	MESG	@PC_REG		;PRINT "ST="
  EE56   C1F9           	MOV	*R9+,R7		;PRINT WORKSPACE ADDRESS
  EE58   2E87           	WHEX	R7
  EE5A   2FA0 EEC0      	MESG	@ST_REG		;PRINT "ST="
  EE5E   C1F9           	MOV	*R9+,R7		;PRINT WORKSPACE ADDRESS
  EE60   2E87           	WHEX	R7
  EE62   04CA           	CLR	R10
  EE64   2FA0 E666      REGIST1:	MESG	@CRLF		;PRINT CR,LF
  EE68   0207 5200      REGIST2:	LI	R7,'R'*256
  EE6C   2F07           	WRITE	R7		;PRINT "R"
  EE6E   D1EA EECE      	MOVB	@NUMTAB(R10),R7
  EE72   2F07           	WRITE	R7		;PRINT REGISTER NO
  EE74   D1EA EECF      	MOVB	@NUMTAB+1(R10),R7
  EE78   2F07           	WRITE	R7		;PRINT REGISTER NO
  EE7A   0207 3D00      	LI	R7,'='*256
  EE7E   2F07           	WRITE	R7
  EE80   C1F9           	MOV	*R9+,R7			;PRINT REGISTER CONTENTS
  EE82   2E87           	WHEX	R7
  EE84   05CA           	INCT	R10
  EE86   028A 0020      	CI	R10,20H
  EE8A   1307           	JEQ	XOP15_X
  EE8C   0207 2000      	LI	R7,' '*256
  EE90   2F07           	WRITE	R7
  EE92   26A0 EEEE      	CZC	@MASK3,R10
  EE96   13E6           	JEQ	REGIST1
  EE98   10E7           	JMP	REGIST2
                        
  EE9A   2FA0 E666      XOP15_X	MESG	@CRLF		;PRINT INDENTATION
  EE9E   0380           	RTWP
                        
  EEA0                  WORKSP:	BSS	32	;MONITOR WORKSPACE
  EEC0   2020 5354      ST_REG	TEXT	'  ST = '
  EEC4   203D 20        
  EEC7   00             	BYTE	0
  EEC8   5043 203D      PC_REG	TEXT	'PC = '
  EECC   20             
  EECD   00             	BYTE	0
  EECE   3020 3120      NUMTAB	TEXT	'0 1 2 3 4 5 6 7 8 9 101112131415'
  EED2   3220 3320      
  EED6   3420 3520      
  EEDA   3620 3720      
  EEDE   3820 3920      
  EEE2   3130 3131      
  EEE6   3132 3133      
  EEEA   3134 3135      
  EEEE   000F           MASK3	WORD	00FH
                        TRACER_INDEX:
  EEF0   0000           	WORD	0
  EEF2                  TRACER_LIST: BSS	20	;DEBUG TRACE LIST
                        
                        ;
                        ; END OF PROGRAMME
                        ;
  EF06                  	END

No error(s).
          CX      2020      XhD EXCMD3          2020    2           jMTAB        ff            ~eEL          Lg    2020         i3     WRT3        2020    HiRDWRT1            4157    RDY2        4ji  0000    RCE         &j            OR          LfV4                2020      LfMDDRIVE           2020                DhDTRY        zi            niCMD         P1     IDX         2020    dhXOP1              5257    C           BhBm  0000    BUG         hMD          C           jhTAT               2020      KXBYTESRD         2020    ST0         NnTWP3        XfA           @j                  TWP6        2020    lINTWP7            3852                            Zh      bfP15_X             2020      nm  SEEK0           2020          nTREQ                        XgXOPWP5            5253              P6                2020           nKERR      P8      2020      0l  XOPWP9          2020           .EK            	          nj      P5A         2020    `mRSTCMD            2020                     <f                REDTRY          2020              CMD         SELE  5443          \g      bi                 hVERIFY            E9C4    XOP11A            EDCA    XOP_LOOP          EE38    INTTAB            E6AC
SETDENS           EA36    FDCSTATUS         E638    TIMON             F000    RWTRY             E65A
WBOOT             E6F4    XOPTAB            E66C    GOTONE            EDEA    PC_REG            EEC8
XOP12             EDF8    DRVRDY            E660    TYPMUX            000A    CRUBAS            0080
INIT2             E6E0    SELMUX            0000    R13               000D    XOPWP12           ECF0
