                        ;
                        ;---MONITOR AND FDC INTERFACE ROUTINES for the TI99000 SBC
                        ;
                        ;	The monitor routines are called from a DOS or other 
                        ;	programme to perform Console I/O and Disc I/O similar
                        ;	to a BIOS.
                        ;
                        ;	Version 2.1	14th May 2020 - The year of the Corona Virus
                        ;
                        ;   Written by Alex Cameron
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
  0007                  R7	EQU	7
  0008                  R8	EQU	8
  0009                  R9	EQU	9			;Use to index workspace pointer not stack overflow
                        ;SL	EQU	R9			;STACK LIMIT
  000A                  R10	EQU	10
                        ;SP	EQU	R10			;STACK POINTER
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000C                  PORT	EQU	R12			;IO BASE
  000D                  R13	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
  000F                  ST	EQU	15
                        ;
                        ;***************************************************
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        ;****************************************************
                        ;
                        	DXOP	PUSHREG,4	;PUSH RANGE OF REGISTERS TO STACH
                        	DXOP	POPREG,5	
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8		;PUSH SINGLE REGISTER
                        	DXOP	POP,9
                        	DXOP	WHEX,10		;WRITE OUT A 16 BIT HEX VALUE
                        	DXOP	RHEX,11		;READ IN A 16 BIT HEX VALUE
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13		;READ CHAR IN MSB
                        	DXOP	MESG,14		;OUTPUT NULL TERMINATED MESSAGE
                        	DXOP	DEBUG,15
                        ;
                        ; SOME EQUATES
                        ;
  F000                  TIMON	EQU	0F000H		;GO TO TIMON UNDER WORST CASE CONDITIONS
  CA00                  SHELL	EQU	0CA00H		;ADDRESS OF SHELL
  E600                  MONORG	EQU	0E600H		;ORIGIN FOR THIS MONITOR
                        
  E5E0                  WORKSP:	EQU	MONORG - 32		;MONITOR WORKSPACE
  E5C0                  BOOT_TWP:	EQU	WORKSP - 32		;THIS IS BOOT TEMPORARY WORKSAPCE
  E5BE                  STACKP:	EQU	BOOT_TWP - 2
  0008                  INTVEC:	EQU	08H
  C600                  LOADER:	EQU	0C600H 		; THIS IS THE LOADER ADDRESS
                        ;
                        ;NOTE DOS IS NOT KNOWN TO MONITOR.
                        ;
                        
                        ;
                        ; LOCATE THE MONITOR IN MEMORY
                        ;
  E600                  	AORG	MONORG
                        ;
                        ;************************************************************************************
                        ;
                        ;	NOTE ALL PROGRAMMES MUST SET THE WORSPACE
                        ;	POINTERS AND STACKS BEFORE CALLING
                        ;
                        ;	NOTE THE FIRST VECTOR BLWP - CALLED ONCE TO INITIALISE MONITOR
                        ;
                        ;*************************************************************************************
                        ;
  E600   E5E0           ENTRY	WORD	WORKSP		;THIS IS MONITOR WORKSAPCE
  E602   E6B6           	WORD	INIT		;INITIALISE ALL XOP, INTERRUPT AND ENTRY VECTORS
  E604   0460 E70C      BOOT_ADDR:	B	@BOOT		;PERFORM A COLD BOOT - POS IN TABLE HELPS DEBUGGING
  E608   0460 E766      	B	@CIN		;CHAR IN
  E60C   0460 E76A      	B	@COUT		;CHAR OUT
  E610   0460 E772      	B	@SELDSK		;SELECT A DISK DRIVE
  E614   0460 E830      	B	@RECAL	 	;RECALIBRATE DRIVES
  E618   0460 EA58      	B	@SEEK		;SEEK THE TRACK IN R3
  E61C   0460 E868      	B	@RDREC		;READ SELECTED SECTOR 
  E620   0460 E8C0      	B	@WRREC	 	;WRITE SELECTED SECTOR 
  E624   0460 E842      	B	@RDID		;READ TRACK ID ADDRESS
  E628   0460 E6F2      	B	@WBOOT		;PERFORM A WARM BOOT
  E62C   0460 E884      	B	@RDTRK		;READ A TRACK OF DATA
  E630   0460 E8A4      	B	@WRTRK		;WRITE A TRACK OF DATA
                        
                        ;
                        ;**********************************************************
                        ;
                        ;	DMA PARAMETER BLOCK DEFINITIONS
                        ;	INDEXED DEPENDING ON READ(0), OR WRITE(1) COMMAND
                        ;
                        ;************************************************************
                        ;
  E634   34B8           CMDTBL:	STCR	*R8+,BYTEWIDE		;BYTE WIDE FDC DATA READ
  E636   30B8           	LDCR	*R8+,BYTEWIDE		;BYTE WIDE FDC DATA WRITE
                        ;
                        ;--REGISTERS IN INTERRUPT 3 WORKSPACE  
                        ;
  EBC8                  DMACMD	SET	2*R9+INTWP2	;CURRENT COMMAND
  EBC6                  DMAADDR 	SET	2*R8+INTWP2	;REGISTER HOLDING SOURCE ADDRESS
  EBCE                  DMAPORT	SET	2*R12+INTWP2	;IO BASE REG I.E. DATAREG
                        ;
                        ;--IO	PARAMETER	BLOCK
                        ;
  E638   0000           FDCSTATUS	WORD	0	 	;OPERATION STATUS
  E63A   0000           BYTESRD	WORD	0		;A DEBUGGING FEATURE FOR NUMBER OF BYTES READ
  E63C   0000           TRKSTAT	WORD	0		;VERIFIED TRACK STATUS
  E63E   0000           SECSTAT	WORD	0		;VERIFIED SECTOR STATUS
  E640   0000           IOPTR	WORD	0		;IO BUFFER POINTER IN R8 OF DRQ INT
  E642   FFFF           TRACK	WORD	-1	 	;CURRENT SELECTED DRIVE TRACK NO
  E644   0000 0000      TRKTAB	WORD	0,0		;DRIVE 1, 2 => ;HEAD POSITIONS FOR 2 DRIVES	
  E648   0000 0000      TYPTAB	WORD	0,0		;DRIVE 1, 2 => BIT 1 1=SD,0=DD;BIT 2 1=MINI=5.25, 0=MINI=3.5
  E64C   0000           SECTOR	WORD	0	 	;CURRENT SECTOR NO.
  E64E   0000           SIDE	WORD	0		;SIDE SELECT BIT
  E650   0000           CMDTYP	WORD	0		;COMMAND TYPE
  E652   0000           DSKTYP	WORD	00B		;CURRENT UNIT / DENSITY INDICATOR (USING TYPTAB ABOVE)
  E654   0000           DRIVE	WORD	0		;CURRENT DRIVE
  E656   0007           FNDTRY:	WORD	7		;FIND TRACK RETRY COUNT
  E658   0005           MAXRWT	WORD	5		;NUMBER OF RETRIES ALLOWED
  E65A   0005           RWTRY	WORD	5
  E65C   0000           ERRTYP	WORD	0		;ERROR STAUTS FOR READ/WRITE ROUTINES
  E65E   0000           OPCOMP	WORD	0		;CLEARED WHEN IF DISK OPERATION COMPLETE
  E660   0000           DRVRDY	WORD	0		;CLEARED WHEN DRIVE READY TIME OUT
  E662   00             SELCPY	BYTE	0		;COPY OF DATA IN SELECT/MUX OUTPUTS
  E663   00             	EVEN
  E664   0000           INUSE	WORD	0
  E666   0D0A 00        CRLF	BYTE	0DH,0AH,0
  E669   00             	EVEN
                        ;
                        ;1797-FDC COMMANDS
                        ;
  0088                  RDCMD:	EQU	10001000B 		;READ CMD
  00C0                  RIDCMD:	EQU	11000000B	 	;READ ID
  00A8                  WRCMD:	EQU	10101000B 		;WRITE CMD
  00F0                  WTCMD:	EQU	11110000B		;WRITE TRACK
  00E0                  RTCMD:	EQU	11100000B		;READ TRACK
  001C                  SEKCMD:	EQU	00011100B 		;SEEK CMD
  000C                  RSTCMD:	EQU	00001100B	 	;RESTORE COMMAND
  00D0                  FINTCMD:	EQU	11010000B		;FORCE INTERRUPT COMMAND
  005C                  SICMD:	EQU	01011100B		;STEP IN COMMAND
  007C                  SOCMD:	EQU	01111100B		;STEP OUT COMMAND
                        ;
                        ;--FDC 1797 IO REG LOCATIONS
                        ;
  8000                  FDC1797:	EQU	8000H		;IO BASE REGISTER- BYTE TRANSFER WITH MSB SET
  8000                  STSREG:	EQU	FDC1797+0 		;MAIN STATUS REG
  8000                  CMDREG:	EQU	FDC1797+0 		;COMMAND REGISTER
  8002                  TRKREG:	EQU	FDC1797+2		;TRACK REGISTER
  8004                  SECREG:	EQU	FDC1797+4		;SECTOR REGISTER
  8006                  DATREG:	EQU	FDC1797+6		;DATA REGISTER
                        ;
                        ;
                        ;--PORTS ETC.
                        ;
  0000                  SELMUX:	EQU	0		;SELECT CONTROL PORT
  000A                  TYPMUX:	EQU	SELMUX + 2*5	;START AT BIT 5
  0002                  BYTEWIDE:	EQU	2		;PARALLEL I/O DONE IN BYTES (UNIQUE TO 99105)
                        ;
                        ;
                        ;COLD	START	ENTRY	POINT
                        ;
                        ;
  E66A                  	EVEN
  E66A   EC16 ED26      XOPTAB	WORD	XOPWP0,XOP0,XOPWP1,XOP1,XOPWP2,XOP2,XOPWP3,XOP3
  E66E   EC26 ED28      
  E672   EC36 ED2A      
  E676   EC46 ED2C      
  E67A   EC56 ED2E      	WORD	XOPWP4,XOP4,XOPWP5,XOP5,XOPWP6,XOP6,XOPWP7,XOP7,XOPWP8,XOP8
  E67E   EC66 ED42      
  E682   EC76 ED54      
  E686   EC86 ED64      
  E68A   EC96 ED70      
  E68E   ECA6 ED7E      	WORD	XOPWP9,XOP9,XOPWP10,XOP10,XOPWP11,XOP11
  E692   ECB6 ED8A      
  E696   ECC6 EDAE      
  E69A   ECD6 EDDE      	WORD	XOPWP12,XOP12,XOPWP13,XOP13,XOPWP14,XOP14,XOPWP15,XOP15
  E69E   ECE6 EDEE      
  E6A2   ECF6 EDFE      
  E6A6   ED06 EE0C      
                        ;
  E6AA   EBB6 EB40      INTTAB	WORD	INTWP2,INTDRQ,INTWP3,INTREQ	;FDC1797 INTERUPT VECTORS
  E6AE   EBC6 EB0E      
  E6B2   EBD6 EB46      	WORD	INTWP4,INTTIMER		;TIMER INTERRUPT
                        ;
  E6B6                  	EVEN
                        
                        ;
                        ;	NOTE.  PROGRAMMES MUST CALL WITH THEIR WP POINTERS SET
                        ;	THIS CALL IS USED TO SET UP MONITOR
                        ;	CALLED USING BLWP @MONITOR
                        ;
  E6B6   0300 0000      INIT:	LIMI	0	 	;DISABLE
  E6BA   02E0 E5E0      	LWPI	WORKSP		;USE MONITOR LOCAL WORKSPACE
  E6BE   020A E5BE      	LI	R10,STACKP		;STACK FOR LOCAL MONITOR USE
                        ;
                        ;************************************************************
                        ;
                        ;	SWTICH TO MONITOR XOP VECTORS RATHER THAN TIMON ROM
                        ;	THIS MEANS THAT ALL PROGRAMMES THAT USE XOP WILL USE THE
                        ;	THE XOP IMPLEMENTATIONS DEFINED IN MONITOR THAT IS HERE!
                        ;
                        ;************************************************************
                        
  E6C2   0200 0008      	LI	R0,INTVEC		;SET UP INTERRUPT VECTORS
  E6C6   0201 E6AA      	LI	R1,INTTAB		;ONLY INT 2 TO 4 
  E6CA   1000           INT1:	NOP
  E6CC   CC31           	MOV	*R1+,*R0+
  E6CE   CC31           	MOV	*R1+,*R0+
  E6D0   0280 0014      	CI	R0,INTVEC+12
  E6D4   16FA           	JNE	INT1
  E6D6   0200 0040      	LI	R0,40H		;INITIALISE XOP-START AT XOP0
  E6DA   0201 E66A      	LI	R1,XOPTAB
  E6DE   1000           INIT2:	NOP			;WRITE PROTECT
  E6E0   CC31           	MOV	*R1+,*R0+
  E6E2   1000           	NOP			;WTRITE PROTECT
  E6E4   CC31           	MOV	*R1+,*R0+	
  E6E6   0280 0080      	CI	R0,80H		;FINISHED?
  E6EA   16F9           	JNE	INIT2		;NO
                        ;
  E6EC   2DA0 E6F2      	CALL	@WBOOT
  E6F0   0380           	RTWP
                        
                        ;
                        ;************************************************************
                        ;
                        ;	WARM BOOT ASSUMES A COLD BOOT HAS ALREADY OCCURED
                        ;	AND DISC IS JUST BEING CALIBRATED TO A KNOW STATE
                        ;
                        ;************************************************************
                        ;
  E6F2   0720 E642      WBOOT:	SETO	@TRACK		;INVALIDATE TRACK
  E6F6   04E0 E64C      	CLR	@SECTOR
  E6FA   04E0 E654      	CLR	@DRIVE
  E6FE   0202 0000      	LI	R2,0		;SELECT BOOT DRIVE
  E702   2DA0 E772      	CALL	@SELDSK		;SELECT DISK
  E706   2DA0 E830      	CALL	@RECAL		;RECAL
  E70A   2DC0           	RET			;RETURN FROM BLWP
                        ;
                        ;*********************************************************
                        ;
                        ;	BOOT ASSUMES NOTHING HAS BEEN INITIALISED THEREFORE IT
                        ;	MUST CALL MONITOR TO INITIALISE THE FDC AND INTERRUPT VECTORS ETC BY
                        ;	CALLING BLWP @MONITOR
                        ;
                        ;***********************************************************
                        ;
  E70C   02E0 E5C0      BOOT:	LWPI	BOOT_TWP		;WORKSP CAN'T BE THE SAME AS MONITOR THIS IS A TEMPORARY WORKSPACE
  E710   0420 E600      	BLWP	@MONORG		;PERFORM INITIALISATION AND WARM BOOT
  E714   020A E5BE      	LI	R10,BOOT_TWP-2	;JUST PUT THE TEMPOARY STACK ABOVE THE WORKSPACE
                        ;
                        ;---NOW TRY TO BOOT FROM TRACK 0 SECTOR 1
                        ;
  E718   2FA0 E756      	MESG	@BMSG2
  E71C   04C2           	CLR	R2
  E71E   2DA0 E772      	CALL	@SELDSK		;SELECT DRIVE A
  E722   160B           	JNE	BOOT2
  E724   2DA0 E830      	CALL	@RECAL		;RECAL DRIVE A
  E728   0203 0001      	LI	R3,1		;BOOT SECTOR
  E72C   0204 C600      	LI	R4,LOADER		;USE THIS AREA TO BOOT
  E730   2DA0 E868      	CALL	@RDREC
  E734   1602           	JNE	BOOT2
  E736   0460 C600      	B	@LOADER		;LET THERE BE LIFE - LOAD THE SYSTEM
                        ;
                        ; --BOOT ERROR
                        ;
  E73A   C801 E638      BOOT2	MOV	R1,@FDCSTATUS
  E73E   2FA0 E746      	MESG	@BMSG1
  E742   0460 F000      	B	@TIMON
                        ;
  E746   2D2D 426F      BMSG1	TEXT	'--Boot error'
  E74A   6F74 2065      
  E74E   7272 6F72      
  E752   0D0A 00        	BYTE	0DH,0AH,0
  E755   00             	EVEN
  E756   2D2D 426F      BMSG2	TEXT	'--Booting....'
  E75A   6F74 696E      
  E75E   672E 2E2E      
  E762   2E             
  E763   0D0A 00        	BYTE	0DH,0AH,0
  E766                  	EVEN
                        
                        ;
                        ;****************************
                        ;
                        ; CHAR IN (MSB	OF R1)
                        ;
                        ;*****************************	
  E766   2F41           CIN	READ	R1	 		;GET CHAR
  E768   2DC0           	RET
                        ;*******************************
                        ;
                        ;	CHAR OUT (MSB OF R2)
                        ;
                        ;********************************
                        ;
  E76A   04C1           COUT	CLR	R1
  E76C   D042           	MOVB	R2,R1	 		;COPY CHAR TO R1
  E76E   2F01           	WRITE	R1	 		;OUTPUT IT
  E770   2DC0           	RET	 
                        ;
                        ;************************************************
                        ;
                        ;	SELECT THE DRIVE IN R2
                        ;
                        ;************************************************
                        ;
  E772   0282 0001      SELDSK:	CI	R2,1			;MAXIMUM NUMBER IS 2
  E776   1526           	JGT	SELRET
  E778   2DA0 E7CA      	CALL	@DRVSEL			;SELECT THE DRIVE
  E77C   2DA0 E7E4      	CALL	@READY			;EMIT NEW SELECT BITS AND TEST READY
  E780   1621           	JNE	SELRET
  E782   C041           	MOV	R1,R1
  E784   161F           	JNE	SELRET			;NOT READY
  E786   C0E0 E654      	MOV	@DRIVE,R3			;SAVE LAST UNIT
  E78A   0A13           	SLA	R3,1			;TWO BYTES PER WORD
  E78C   C802 E654      	MOV	R2,@DRIVE			;NEW UNIT
  E790   C8E0 E642      	MOV	@TRACK,@TRKTAB(R3)		;STORE PREVIOUS DRIVES TRACK POSITION
  E794   E644           
  E796   C060 E652      	MOV	@DSKTYP,R1
  E79A   0241 0003      	ANDI	R1,00000011B
  E79E   C8C1 E648      	MOV	R1,@TYPTAB(R3)		;STORE PREVIOUS DISK TYPE
  E7A2   020C 8002      	LI	PORT,TRKREG
  E7A6   0A12           	SLA	R2,1			;MULTIPLY BY 2, IE TWO BYTES PER WORD
  E7A8   C062 E644      	MOV	@TRKTAB(R2),R1		;GET LAST KNOWN HEAD POSITION FOR NEW DRIVE
  E7AC   C801 E642      	MOV	R1,@TRACK			;SAVE THE DRIVE'S NEW POSITION AND
  E7B0   06C1           	SWPB	R1
  E7B2   3081           	LDCR	R1,BYTEWIDE 		;OUTPUT TO THE 1797 FDC
  E7B4   C060 E652      	MOV	@DSKTYP,R1			;DENSITY BITS ETC
  E7B8   0241 00FC      	ANDI	R1,11111100B		;MERGE IN NEW DENSITY CONTROL BIT
  E7BC   E062 E648      	SOC	@TYPTAB(R2),R1
  E7C0   2DA0 EA34      	CALL	@SETDENS			;SET DENSITY CONTROL BIT
  E7C4   0420 E9F8      SELRET:	BLWP	@SETTIMER			;SET DRIVE TIMER
  E7C8   2DC0           	RET
                        ;
                        ;	OUTPUT SELECT BITS
                        ;
  E7CA   0242 0003      DRVSEL:	ANDI	R2,00000011B		;MAKE SURE IT'S IN RANGE	
  E7CE   D822 E7D6      	MOVB	@SELTAB(R2),@SELCPY		;STORE NEW STATE OF SELECT/MUX PORT
  E7D2   E662           
  E7D4   2DC0           	RET
                        ;
  E7D6   01             SELTAB:	BYTE	00000001B			;BITS FOR UNIT # 0
  E7D7   02             	BYTE	00000010B
  E7D8   04             	BYTE	00000100B
  E7D9   08             	BYTE	00001000B
                        ;
                        ; TURN OFF ALL DRIVES
                        ;
  E7DA   020C 0000      DESELECT: 	LI	PORT,SELMUX
  E7DE   04C0           	CLR	R0
  E7E0   3140           	LDCR	R0,00000101B		;CLEAR DISKS
  E7E2   2DC0           	RET
                        
                        ;
                        ;	EMIT MUX BITS AND SEE IF DRIVE IS READY
                        ;
  E7E4   0201 0001      READY:	LI	R1,1
  E7E8   C801 E664      	MOV	R1,@INUSE		;SET DISK-ACTIVE FLAG
  E7EC   020C 0000      	LI	PORT,SELMUX		;SELECT PORT
  E7F0   04C1           	CLR	R1
  E7F2   3141           	LDCR	R1,5		;CLEAR SELECT BITS FIRST
  E7F4   3160 E662      	LDCR	@SELCPY,5		;;OUTPUT CURRENT DRIVE SELECT/MUX BITS
  E7F8   C020 EB44      	MOV	@TIMEOUT,R0
  E7FC   0280 0001      	CI	R0,1
  E800   1605           	JNE	READY1
  E802   2DA0 E81E      	CALL	@FORCE
  E806   0241 0080      	ANDI	R1,10000000B
  E80A   1606           	JNE	READY2
  E80C   2DA0 EA18      READY1:	CALL	@WAITRDY
  E810   2DA0 E81E      	CALL	@FORCE		;CLEAR CONTROLLER AND TEST DRIVE
  E814   0241 0080      	ANDI	R1,10000000B	;READY FLAG
  E818   C801 E638      READY2:	MOV	R1,@FDCSTATUS
  E81C   2DC0           	RET
                        ;
                        ;
  E81E   0201 00D0      FORCE:	LI	R1,FINTCMD		;FORCE INTERRUPT COMMAND
  E822   2DA0 EABE      	CALL	@EXCMD
  E826   020C 8000      	LI	PORT,STSREG		;GET RESULT BYTE AS NO INTERRUPT
  E82A   3481           	STCR	R1,BYTEWIDE		;HAS OCCURRED
  E82C   0981           	SRL	R1,8
  E82E   2DC0           	RET
                        ;
                        ;*****************************
                        ;
                        ;--RECAL IS JUST SEEK TO TRK ZERO (RECAL IS HANDLED THERE)
                        ;
                        ;*****************************
                        ;
  E830   0203 0000      RECAL:	LI	R3,0			;RECAL COMMAND
  E834   0720 E642      	SETO	@TRACK			;INVALIDATE TRACK SEEK WILL ZERO
  E838   2DA0 EA58      	CALL	@SEEK			;TRACK REGISTER IS ZEROED
  E83C   0241 0081      	ANDI	R1,10000001B
  E840   2DC0           	RET
                        ;
                        ;*******************************
                        ;
                        ;READ ID FIELDS
                        ;
                        ;******************************
                        ;
  E842   C804 E640      RDID	MOV	R4,@IOPTR
  E846   2DA0 E7E4      	CALL	@READY
  E84A   160B           	JNE	RDIDX
  E84C   0202 00C0      	LI	R2,RIDCMD
  E850   2DA0 E8D8      	CALL	@RDWRT			;READ ID RECORD INTO (R4)
  E854   1606           	JNE	RDIDX			;EXIT IF DISK ERROR
  E856   C120 E640      	MOV	@IOPTR,R4
  E85A   0224 0006      	AI	R4,6			;POINT TO 7TH BYTE AFTER ID RECORD
  E85E   C520 E652      	MOV	@DSKTYP,*R4		;STORE DISK TYPE THERE
  E862   0420 E9F8      RDIDX	BLWP	@SETTIMER
  E866   2DC0           	RET
                        ;
                        ;****************************
                        ;
                        ;READ A RECORD
                        ; 	R3 HOLDS SECTOR
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E868   C804 E640      RDREC:	MOV	R4,@IOPTR
  E86C   C803 E64C      	MOV	R3,@SECTOR
  E870   2DA0 E7E4      	CALL	@READY
  E874   1604           	JNE	RDRECX		;EXIT IF DRIVE NOT READY
  E876   0202 0088      	LI	R2,RDCMD		;DO A READ COMMAND
  E87A   2DA0 E8D8      	CALL	@RDWRT
  E87E   0420 E9F8      RDRECX:	BLWP	@SETTIMER
  E882   2DC0           	RET			;BIND	*SP+ ;RET
                        ;****************************
                        ;
                        ;READ A TRACK
                        ; 	R3 NOT REQUIRED
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E884   C804 E640      RDTRK	MOV	R4,@IOPTR
  E888   0203 0001      	LI	R3,1		;DUMMY
  E88C   C803 E64C      	MOV	R3,@SECTOR
  E890   2DA0 E7E4      	CALL	@READY
  E894   1604           	JNE	RDTRKX		;EXIT IF DRIVE NOT READY
  E896   0202 00E0      	LI	R2,RTCMD		;DO A READ COMMAND
  E89A   2DA0 E8D8      	CALL	@RDWRT
  E89E   0420 E9F8      RDTRKX	BLWP	@SETTIMER
  E8A2   2DC0           	RET			;BIND	*SP+ ;RET;
                        ;
                        ;****************************
                        ;
                        ;WRITE A TRACK
                        ; 	R3 NOT REQUIRED
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E8A4   C804 E640      WRTRK	MOV	R4,@IOPTR
  E8A8   C803 E642      	MOV	R3,@TRACK
  E8AC   2DA0 E7E4      	CALL	@READY
  E8B0   16F6           	JNE	RDTRKX		;EXIT IF DRIVE NOT READY
  E8B2   0202 00F0      	LI	R2,WTCMD	;DO A WRITE COMMAND
  E8B6   2DA0 E8D8      	CALL	@RDWRT
  E8BA   0420 E9F8      WRTRKX	BLWP	@SETTIMER
  E8BE   2DC0           	RET			;BIND	*SP+ ;RET;
                        	;
                        ;******************************
                        ;
                        ;WRITE A RECORD
                        ; 	R3 HOLDS SECTOR
                        ;	R4 HOLDS BUFFER POINTER
                        ;
                        ;*****************************
                        ;
  E8C0   C804 E640      WRREC	MOV	R4,@IOPTR
  E8C4   C803 E64C      	MOV	R3,@SECTOR
  E8C8   2DA0 E7E4      	CALL	@READY
  E8CC   1604           	JNE	WRRECX
  E8CE   0202 00A8      	LI	R2,WRCMD
  E8D2   2DA0 E8D8      	CALL	@RDWRT
                        WRRECX	;BLWP	@SETTIMER
  E8D6   2DC0           	RET
                        ;
                        ; SECTOR TRANSLATE (NOT NEEDED ANYMORE MAY 2010)
                        ; SO  JUST RETURN
                        ;
                        ;SECTRAN	RET			;NOT NEEDED WITH IBM FORMATS
                        ;	ANDI	R3,000FH
                        ;	DEC	R3		; 0 -> 8
                        ;	AI	R3,SETTBL
                        ;	MOVB 	*R3,R0
                        ;	MOV	R0,R3
                        ;	SRL	R3,8
                        ;	RET
                        ;SETTBL	BYTE	1,4,7,2,5,8,3,6,9	;1,4,7,9,2,5,8,3,6
                        ;	EVEN
                        ;
                        ;
                        ;********************************
                        ;
                        ;	COMMON READ AND WRITE ROUTINE (RDWRT)
                        ;	ENTER WITH 
                        ;		R4 -> IO BUFFER
                        ;		R3 -> SECTOR
                        ;		R2 -> COMMAND TYPE
                        ;
                        ;	ASSUME THE CORRECT TRACK IS UNDER THE DISK HEAD
                        ;
                        ;	TREAT DRQINT AS A PSUEDO DMA CHANNEL
                        ;	BY LOADING THE PORT REGISTER(R12) WITH THE
                        ;	I/O ADDRESS AND THE TYPE OF OPERATION I.E. READ/WRITE
                        ;	THERE IS NO COUNT AS I RELY ON AN INTERRUPT FROM THE
                        ;	FDC1797 TO TERMINATE THE TRANSFER.
                        ;
                        ;*********************************
                        ;
  E8D8   C802 E650      RDWRT:	MOV	R2,@CMDTYP		;SAVE READ/WRITE/READID COMMAND
  E8DC   C820 E658      	MOV	@MAXRWT,@RWTRY	;SET READ/WRITE RETRY
  E8E0   E65A           
  E8E2   C0E0 E64C      RDWRT0:	MOV	@SECTOR,R3
  E8E6   020C 8004      	LI	PORT,SECREG		;FDC SECTOR REGISTER
  E8EA   06C3           	SWPB	R3
  E8EC   3083           	LDCR	R3,BYTEWIDE
                        ;
                        ;	SET UP PSUEDO DMA CHANNEL
                        ;
  E8EE   04C3           	CLR	R3			;INDEX POINTER
  E8F0   0200 8006      	LI	R0,DATREG		;FDC REG WHERE DATA IS
  E8F4   C800 EBCE      	MOV	R0,@DMAPORT
  E8F8   C820 E640      	MOV	@IOPTR,@DMAADDR		;DMA TRANSFER ADDRESS
  E8FC   EBC6           
  E8FE   C060 E650      	MOV	@CMDTYP,R1
  E902   0281 00A8      	CI	R1,WRCMD		;WRITE COMMAND ?
  E906   1307           	JEQ	RDWRT1			;YES
  E908   0281 00F0      	CI	R1,WTCMD		;WRITE COMMAND ?
  E90C   1304           	JEQ	RDWRT1			;YES
  E90E   C823 E634      	MOV	@CMDTBL(R3),@DMACMD	;EXECUTE A READ COMMAND (STCR)
  E912   EBC8           
  E914   1004           	JMP	RDWRT2
  E916   05C3           RDWRT1:	INCT	R3
  E918   C823 E634      	MOV	@CMDTBL(R3),@DMACMD	;EXECUTE A WRITE COMMAND (LDCR)
  E91C   EBC8           
                        ;
                        ;
                        ;--MERGE SIDE BIT BEFORE COMMAND IS EXECUTED
                        ;
  E91E   0281 00C0      RDWRT2:	CI	R1,RIDCMD		;IF ID CMD DON'T NEED TO MERGE
  E922   1304           	JEQ	RDWRT5
  E924   C020 E64E      	MOV	@SIDE,R0		;GET SIDE BIT
  E928   0A10           	SLA	R0,1
  E92A   E040           	SOC	R0,R1		;OR IN SIDE BIT INTO COMMAND BYTE
  E92C   2DA0 EABE      RDWRT5:	CALL	@EXCMD
  E930   0241 00DF      	ANDI	R1,11011111B	;MASK READY/WRITEPROTECT/RNF/CRC/OVERRUN/DRQ/BUSY
  E934   130C           	JEQ	RDWRT4		;RETURN IN NO DISK IO ERROR
                        
                        DSKERR:	;LI	R0,8
                        	;MOV	R0,@07B0H+8
                        
  E936   C801 E65C      	MOV	R1,@ERRTYP
  E93A   2DA0 E950      	CALL	@RECOVER		;DO READ/WRITE ERROR RECOVERY
  E93E   1603           	JNE	RDWRT3		;DON'T RETRY IF UN-RECOVERABLE ERROR
  E940   0620 E65A      	DEC	@RWTRY		;ELSE DECREMENT AND KEEP TRYING UNTIL 0
  E944   16CE           	JNE	RDWRT0
  E946   C060 E65C      RDWRT3:	MOV	@ERRTYP,R1
  E94A   0460 EAEC      	B	@IOERR
  E94E   2DC0           RDWRT4:	RET
                        ;
                        ;***************************************
                        ;
                        ;	ATTEMPT TO RECOVER FROM A READ WRITE
                        ;	ERROR
                        ;
                        ;****************************************
                        ;
  E950   C081           RECOVER	MOV	R1,R2			;COPY ERROR CODE TO R2
  E952   0242 0087      	ANDI	R2,10000111B		;ISOLATE REAY/OVERRUN/DRQ/BUSY ERRORS
  E956   1305           	JEQ	RECOV1			;JUMP IF NONE OF THOSE SET
  E958   C081           	MOV	R1,R2
  E95A   2DA0 E81E      	CALL	@FORCE			;CLEAR ERROR FLAGS IN 1797
  E95E   C042           	MOV	R2,R1
  E960   2DC0           RECOV0	RET
                        ;
                        ;	ARRIVE HERE IF CRC OR RNF ERROR
                        ;
  E962   C081           RECOV1	MOV	R1,R2
  E964   0242 0010      	ANDI	R2,00010000B		;SECTOR ID NOT FOUND
  E968   1304           	JEQ	STEP
  E96A   0242 0020      	ANDI	R2,00100000B		;RNF ERROR
  E96E   1318           	JEQ	RECOV3
  E970   2DC0           	RET				;PROCESS ID NOT FOUND ERROR
                        ;
                        ;	ARRIVE HERE ON BAD CRC IN DATA OR ID FIELD
                        ;
  E972   8820 E65A      STEP:	C	@RWTRY,@MAXRWT		;CHECK FOR FIRST TIME
  E976   E658           
  E978   13F3           	JEQ	RECOV0
  E97A   0201 005C      	LI	R1,SICMD			;STEP BACK AND FORTH
  E97E   2DA0 EABE      	CALL	@EXCMD
  E982   0201 005C      	LI	R1,SICMD			;STEP IN TWO TRACKS THEN BACK
  E986   2DA0 EABE      	CALL	@EXCMD
  E98A   0201 007C      	LI	R1,SOCMD
  E98E   2DA0 EABE      	CALL	@EXCMD
  E992   0201 007C      	LI	R1,SOCMD
  E996   2DA0 EABE      	CALL	@EXCMD
  E99A   2DA0 E9C2      	CALL	@VERIFY
  E99E   2DC0           	RET				;RETURN WITH STATUS IN R1
                        ;
                        ;	ARRIVE HERE IF RNF ERROR
                        ;
  E9A0   2E20 E652      RECOV3 	PUSH	@DSKTYP			;SAVE DENSITY CONTROL BYTE
  E9A4   2DA0 E9C2      	CALL	@VERIFY			;TRACK VERIFY USING READ - ID
  E9A8   2E43           	POP	R3			;KEEP PREVIOUS DENSITY BYTE HERE
  E9AA   1301           	JEQ	RECOV4			;RETURN IF NO ID MARK FOUND
  E9AC   2DC0           	RET
                        ;
  E9AE   80E0 E652      RECOV4	C	@DSKTYP,R3		;SEE IF DENSITY WAS CHANGED BY 'VERIFY'
  E9B2   1303           	JEQ	RECOV5			;AND EXIT WITH RNF IF NOT
  E9B4   04C1           	CLR	R1
  E9B6   C041           	MOV	R1,R1			;CLEAR R1 TO INDICATE A RETRY SHOULD BE
  E9B8   2DC0           	RET				;DONE NOW THAT DENSITY IS RIGHT
                        ;
  E9BA   0201 0010      RECOV5	LI	R1,00010000B             ;HEX 0010H
  E9BE   C041           	MOV	R1,R1			;INDICATE ERROR DUE TO NON-EXISTENT
  E9C0   2DC0           	RET				; SECTOR OR INDETERMINATE TRACK
                        ;
                        ; VERIFY WE ARE TRACK
                        ;
  E9C2   0201 00C0      VERIFY	LI	R1,RIDCMD
  E9C6   2DA0 EABE      	CALL	@EXCMD			;READ NEXT ID-MARK TO VERIFY SEEK
  E9CA   0241 0099      	ANDI	R1,10011001B
  E9CE   1308           	JEQ	VERFY2			;JUMP IF ID MARK READ SUCCESSFULLY
  E9D0   2DA0 EA46      	CALL	@FLIPDENS			;ELSE SWITCH DISK DENSITY CONFIGURATION
  E9D4   0201 00C0      	LI	R1,RIDCMD
  E9D8   2DA0 EABE      	CALL	@EXCMD			;TRY AGAIN
  E9DC   0241 0099      	ANDI	R1,10011001B
  E9E0   C141           VERFY2	MOV	R1,R5			;SAVE STATUS OF READ-ID COMMAND
  E9E2   2DA0 E81E      	CALL	@FORCE			;CLEAR OVERRUN AND DRQ BITS IN 1797
  E9E6   C045           	MOV	R5,R1
  E9E8   1601           	JNE	VERFY3			;RETURN IF ID MARK WAS FOUND
  E9EA   2DC0           	RET
  E9EC   2DA0 EA34      VERFY3	CALL	@SETDENS			;ELSE GO BACK TO ORIGINAL DENSITY
  E9F0   C045           	MOV	R5,R1			;RETURN WITH ERROR INDICATED
  E9F2   2DC0           	RET
                        ;
                        ;********************************
                        ;
                        ;INTIALISE	INT.VECTORS	ETC	
                        ;
                        ;*******************************
                        ;
  E9F4   2DC0           INTSYS	RET
                        ;
                        ;********************************
                        ;
                        ;RESET	FDC
                        ;
                        ;********************************
                        ;
  E9F6   2DC0           RSET	RET
                        ;
                        ;
                        ;*******************************************
                        ;
                        ; 	SET THE TIME OUT TIMER
                        ;
  E9F8   EBD6 E9FC      SETTIMER:	WORD	INTWP4,SETTIMER+4
  E9FC   020C 0080      	LI	PORT,0080H
  EA00   1E14           	SBZ	20			;RESET INTERRUPT
  EA02   0208 00C8      	LI	R8,200			; 200 X 16MS = 7.0SEC
  EA06   C808 EB44      	MOV	R8,@TIMEOUT
  EA0A   1E0E           	SBZ	14
  EA0C   1D0D           	SBO	13			;LOAD INTERVAL TIMER ONLY
  EA0E   3220 EA16      	LDCR	@INTLV2,8
  EA12   1D14           	SBO	20			;ENABLE INTERRUPT
  EA14   0380           	RTWP
                        ;
  EA16   FF             INTLV2:	BYTE	255			;16.0 MILLISECONDS
  EA17   00             	EVEN
                        ;
                        ;ALLOW TIME FOR USER TO INSERT DISC (IN FUTURE MAY INCREASE THE TIMEOUT)
                        ;
                        WAITRDY:
  EA18   2DA0 E81E      	CALL	@FORCE
  EA1C   020C 8000      	LI	PORT,STSREG
  EA20   0720 E660      	SETO	@DRVRDY			 ;ALLOWS US TO TIMEOUT
                        ;
                        WAITRDY1:
  EA24   3480           	STCR	R0,BYTEWIDE
  EA26   0240 8000      	ANDI	R0,8000H
  EA2A   1303           	JEQ	WAITRDY2
                        ;
                        ;	WAIT FOR 32uS FOR DRIVE TO BECOME READY
                        ;
  EA2C   0620 E660      	DEC	@DRVRDY
  EA30   16F9           	JNE	WAITRDY1
                        WAITRDY2:
  EA32   2DC0           	RET
                        ;
                        ;******************************************
                        ;
                        ;	SET DENSITY BIT 
                        ;
                        ;******************************************
                        ;
  EA34   C801 E652      SETDENS:	MOV	R1,@DSKTYP
  EA38   020C 000A      	LI	PORT,TYPMUX
  EA3C   06C1           	SWPB	R1
  EA3E   3081           	LDCR	R1,2		;OUTPUT CONTROL BITS
  EA40   04C1           	CLR	R1
  EA42   C041           	MOV	R1,R1
  EA44   2DC0           	RET
                        
                        	;
                        ;******************************************
                        ;
                        ;	FLIP DENSITY BIT
                        ;
                        ;******************************************
                        ;
  EA46   C801 E652      FLIPDENS:	MOV	R1,@DSKTYP
  EA4A   020C 000A      	LI	PORT,TYPMUX
  EA4E   06C1           	SWPB	R1
  EA50   3001           	LDCR	R1,0		;OUTPUT CONTROL BITS
  EA52   04C1           	CLR	R1
  EA54   C041           	MOV	R1,R1
  EA56   2DC0           	RET
                        ;
                        ;;*******************************************
                        ;
                        ;	SEEK TO THE TRACK NUMBER HELD IN R3
                        ;
                        ;	DRIVE # IS IN DRIVE
                        ;
                        ;********************************************
                        ;
  EA58   2DA0 E7E4      SEEK:	CALL	@READY		;SEE IF DRIVE IS READY FIRST
  EA5C   162E           	JNE	SEEKX		;ERROR CONDITION IN OPSTAT
  EA5E   04E0 E64E      	CLR	@SIDE		;ASSUME SIDE 0		
  EA62   0C0A 0003      	TCMB	R3,0		;TEST AND CLEAR MSB
  EA66   02CF           	STST	ST
  EA68   1602           	JNE	SEEK0		;SIDE 0
  EA6A   05A0 E64E      	INC	@SIDE		;SIDE 1
  EA6E   8803 E642      SEEK0:	C	R3,@TRACK		;ARE WE ALREADY THERE ?
  EA72   1323           	JEQ	SEEKX		;STAT WILL SHOW OKAY
  EA74   C060 E642      	MOV	@TRACK,R1
  EA78   0281 FFFF      	CI	R1,-1		;IF NOT KNOWN TRACK RECAL DRIVE
                        ;	JNE	SEEK3
  EA7C   04E0 E64E      	CLR	@SIDE		;ASSUME SIDE 0
  EA80   0201 000C      	LI	R1,RSTCMD
  EA84   2DA0 EABE      	CALL	@EXCMD		;EXECUTE RESTORE COMMAND AT SLOWEST STEP SPEED
  EA88   0200 0004      	LI	R0,00000100B	;TRK00 BIT
  EA8C   2840           	XOR	R0,R1		;MAKE TRK00 BIT TRUE
  EA8E   0241 0085      	ANDI	R1,10000101B	;NOT FOUND AND NOT READY BITS
  EA92   1613           	JNE	SEEKX		;EXIT IF RESTORE CANNOT BE DONE
                        
  EA94   008F           SEEK2:	LST	ST
  EA96   1602           	JNE	SEEK3
  EA98   05A0 E64E      	INC	@SIDE
                        
  EA9C   C803 E642      SEEK3:	MOV	R3,@TRACK
  EAA0   020C 8006      	LI	PORT,DATREG		;ALSO PUT IN 179X TRACK REGISTER
  EAA4   06C3           	SWPB	R3
  EAA6   3083           	LDCR	R3,BYTEWIDE		;OUTPUT TO FDC PORT
  EAA8   0201 001C      	LI	R1,SEKCMD
  EAAC   2DA0 EABE      	CALL	@EXCMD
  EAB0   0241 0090      	ANDI	R1,10010000B	;NOT FOUND & NOT READY ERROR
  EAB4   1302           	JEQ	SEEKX
  EAB6   0720 E642      	SETO	@TRACK
                        
                        SEEKX:
  EABA   C041           	MOV	R1,R1		;INDICATE RESULT TYPE
  EABC   2DC0           	RET
                        ;
                        ;
                        ;RETURN WITH COMPLETION STATUS IN ACC
                        ;
                        ;	EXECUTE THE COMMAND IN REGISTER R1
                        ;
                        ;
  EABE   0300 0003      EXCMD:	LIMI	3		;DISABLE INTERRUPTS
  EAC2   020C 8000      	LI	PORT,CMDREG
  EAC6   06C1           	SWPB	R1
  EAC8   3081           	LDCR	R1,BYTEWIDE		;OUTPUT CONTROLLER COMMAND
                        ;	LIMI	3		;ENABLE FDC INTERRUPTS ONLY
  EACA   0200 0028      	LI	R0, 40		;DELAY AROUND 60uS BEFORE READING STATUS
  EACE   0600           EXCMD1:	DEC	R0
  EAD0   16FE           	JNE	EXCMD1
  EAD2   0281 D000      	CI	R1,FINTCMD*256	;IF FORCE INTERRUPT EXIT
  EAD6   1307           	JEQ	EXCMD3
                        ;	CI	R1,RDCMD*256
                        ;	JNE	EXT
                        ;
                        ;--WHEN THE FDC COMPLETION INTERRUPT ROUTINE IS ENTERED THIS TEMPORARY
                        ;  HALT INSTRUCTION WILL BE BYPASSED
                        ;
  EAD8   0720 E65E      	SETO	@OPCOMP
  EADC   C060 E65E      EXCMD4A	MOV	@OPCOMP, R1		;TIMEOUT WILL ALSO CLEAR THIS
  EAE0   16FD           	JNE	EXCMD4A		;USE FDCINT TO BUMP PAST THIS ADDRESS
  EAE2   C060 E638      	MOV	@FDCSTATUS,R1		;STATUS REGISTER RESULT
  EAE6   0300 0004      EXCMD3	LIMI	4		;THIS ENABLES TIMER INTERRUPT
  EAEA   2DC0           	RET
                        ;
                        ;************************************************
                        ;
                        ;WRITE	ERROR	MESSAGE
                        ;
                        ;**************************************************
                        ;
  EAEC   2FA0 EB66      IOERR:	MESG	@ERRMSG	
  EAF0   2E81           	WHEX	R1	 		;O/P TYPE
  EAF2   2FA0 EB7A      	MESG	@DRVMSG			;DISK MESSAGE
  EAF6   2EA0 E654      	WHEX	@DRIVE			;DRV #
  EAFA   2FA0 EB83      	MESG	@TRKMSG			;TRACK #
  EAFE   2EA0 E642      	WHEX	@TRACK
  EB02   2FA0 EB8C      	MESG	@SECTMSG	 	;SECTOR MESSAGE
  EB06   2EA0 E64C      	WHEX	@SECTOR			;SECTOR #
  EB0A   0701           	SETO	R1
  EB0C   2DC0           	RET
                        ;	B	@TIMON			;FATAL 
                        ;
                        ;
                        ;******************************
                        ;
                        ;	MAIN INTERRUPT ROUTINES
                        ;
                        ;********************************
                        ;
  EB0E   020C 8000      INTREQ 	LI	PORT,STSREG
  EB12   04C8           	CLR	R8
  EB14   3488           	STCR	R8,BYTEWIDE
  EB16   06C8           	SWPB	R8
  EB18   C808 E638      	MOV	R8,@FDCSTATUS		;SHOW RESULT OF OPERATION
  EB1C   100E           	JMP	INTREQ1
                        	
                        ;CHECK TRACK REGISTER
  EB1E   020C 8002      	LI	PORT,TRKREG
  EB22   04C8           	CLR	R8
  EB24   3488           	STCR	R8,BYTEWIDE
  EB26   06C8           	SWPB	R8
  EB28   C808 E63C      	MOV	R8,@TRKSTAT
                        ;CHECK SECTOR REGISTER
  EB2C   020C 8004      	LI	PORT,SECREG
  EB30   04C8           	CLR	R8
  EB32   3488           	STCR	R8,BYTEWIDE
  EB34   06C8           	SWPB	R8
  EB36   C808 E63E      	MOV	R8,@SECSTAT	
  EB3A   04E0 E65E      INTREQ1	CLR	@OPCOMP		;SHOW THAT THE INTERRUPT WAS EXECUTED
  EB3E   0380           	RTWP
                        ;
                        ;***********************************
                        ;
                        ;	THIS INTERRUPT SIMULATES DMA CONTROL
                        ;	ORGANISED AS FOLLOWS:
                        ;
                        ;	R9 HOLDS CURRENT COMMAND I.E. STCR OR LDCR
                        ;	R8 HOLDS THE CURRENT DMA ADDRESS.
                        ; 	R12 HOLDS THE CURRENT IO PORT - GENERALLY DATREG
                        ;
  EB40   0489           INTDRQ	X	R9		;EXECUTE THE COMMAND SPECIFIED BY RDWRT
  EB42   0380           	RTWP
                        ;
                        ;*********************************************************************
                        ;
                        ;	THIS INTERRUPT IS CONTROLED BY THE TIMER
                        ;
                        ;**********************************************************************
                        ;
  EB44   0001           TIMEOUT	WORD 	1		;N * 16MS DURATION
                        INTTIMER 	
  EB46   020C 0080      	LI	PORT,0080H
  EB4A   1F19           	TB	25
  EB4C   160B           	JNE	TIME2
  EB4E   1D14           	SBO	20		;RESET INTERRUPT
  EB50   0620 EB44      	DEC	@TIMEOUT
  EB54   1607           	JNE	TIME2
  EB56   05A0 EB44      	INC	@TIMEOUT
  EB5A   1E14           	SBZ	20		;DISABLE TIMER
  EB5C   020C 0000      	LI	PORT,SELMUX
  EB60   04C8           	CLR	R8
  EB62   3148           	LDCR	R8,5		;CLEAR DISKS
  EB64   0380           TIME2	RTWP
                        ;
                        ;***********************************************************************
                        ;
                        ;	MESSAGES
                        ;
                        ;************************************************************************
                        ;
  EB66   0D0A 20        ERRMSG	BYTE	0DH,0AH,20H
  EB69   4644 4320      	TEXT	'FDC error type: '
  EB6D   6572 726F      
  EB71   7220 7479      
  EB75   7065 3A20      
  EB79   00             	BYTE	0
                        ;STKMSG	BYTE	0DH,0AH,20H
                        ;	TEXT	'Stack overflow at: '
                        ;	BYTE	0
  EB7A   2044 7269      DRVMSG	TEXT	' Drive: '
  EB7E   7665 3A20      
  EB82   00             	BYTE	0
  EB83   2054 7261      TRKMSG	TEXT	' Track: '
  EB87   636B 3A20      
  EB8B   00             	BYTE	0
  EB8C   2053 6563      SECTMSG	TEXT	' Sector: '
  EB90   746F 723A      
  EB94   20             
  EB95   00             	BYTE	0
                        ;
                        ;***************************************************************************
                        ;
                        ;	ALL XOP's AND WORKSPACES ARE DEFINED IN THIS SECTION AND ARE USED BY ALL PROGRAMMES
                        ;	THAT INTERACT WITH THE MONITOR ROUTINES
                        ;
                        ;	NOTES.
                        ;		1. ALL INTWP'S AND XOPWP'S OVERLAP AND SO ANY INT OR XOP
                        ;	      	   FUNCTIONS MAY ONLY USE REGISTERS R8-R10. REGISTERS R11
                        ;	      	   TO R15 ARE RESERVED FOR XOP & INT LINKAGES.
                        ;
                        ;		2. THE XOP WORKSPACES ARE JUST FOR MANAGING THE STACK AND CONTEXT
                        ;		   CALLS THE ORIGINAL WP IS PRESERVED AFTER THE CALL, WHICH MEANS
                        ;		   THAT CALLING ROUTINES SHARE THE SAME REGISTERS.
                        ;
                        ;		3. EVEN THOUGH R9 & R10 ARE GENERALLY USED AS STACK REGISTERS
                        ;		   THIS DOES NOT APPLY IN INTERRUPT WORKSPACE WHERE THEY CAN'T
                        ;		   BE USED FOR THAT PURPOSE - SIMPLY BECAUSE THE STACK POINTER 
                        ;		   IS NOT PASSED TO THE NEW WORKSPACE.  THEY CAN BE COPIED USING
                        ;		   THE R13 INDEX IF NEEDED AS R13 POINTS TO THE CALLING ROUTINE'S WORKSPACE
                        ;
                        ;*****************************************************************************
                        ;
  EB96                  	EVEN
  EB96                  INTWP0	EQU	$ + 0		;INTERRUPT WORKSPACE
  EBA6                  INTWP1	EQU	INTWP0+16		;ONLY 7 ALLOWED
  EBB6                  INTWP2	EQU	INTWP1+16
  EBC6                  INTWP3	EQU	INTWP2+16
  EBD6                  INTWP4	EQU	INTWP3+16
  EBE6                  INTWP5	EQU	INTWP4+16
  EBF6                  INTWP6	EQU	INTWP5+16
  EC06                  INTWP7	EQU	INTWP6+16
                        ;
                        ;    NOW XOP'S
                        ;
  EC16                  XOPWP0	EQU	INTWP7+16
  EC26                  XOPWP1	EQU	XOPWP0+16
  EC36                  XOPWP2	EQU	XOPWP1+16
  EC46                  XOPWP3	EQU	XOPWP2+16
  EC56                  XOPWP4	EQU	XOPWP3+16
  EC66                  XOPWP5	EQU	XOPWP4+16
  EC76                  XOPWP6	EQU	XOPWP5+16
  EC86                  XOPWP7	EQU	XOPWP6+16
  EC96                  XOPWP8	EQU	XOPWP7+16
  ECA6                  XOPWP9	EQU	XOPWP8+16
  ECB6                  XOPWP10	EQU	XOPWP9+16
  ECC6                  XOPWP11	EQU	XOPWP10+16
  ECD6                  XOPWP12	EQU	XOPWP11+16
  ECE6                  XOPWP13	EQU	XOPWP12+16
  ECF6                  XOPWP14	EQU	XOPWP13+16
  ED06                  XOPWP15	EQU	XOPWP14+16
                        ;
  ED26                  	AORG	XOPWP15+32
                        
                        ;
                        ;
                        ;	DEFINE ALL THE XOP ROUTINES
                        ;
  ED26   0380           XOP0	RTWP
  ED28   0380           XOP1	RTWP
  ED2A   0380           XOP2	RTWP
  ED2C   0380           XOP3	RTWP
                        ;XOP15	RTWP
                        ;
  0080                  CRUBAS	EQU	80H			;TMS9902 CRU BASE
                        ;
                        ;**********************************************
                        ; PUSH REGISTERS R0 to RN ONTO THE STACK
                        ;*********************************************
                        ;
                        XOP4	
  ED2E   C20D           	MOV	R13,R8			;GET THE EFFECTIVE ADDRESS OF CALLING WORKSPACE
  ED30   C2AD 0014      	MOV	@2*R10(R13),R10		;GET SYSTEM STACK POINTER
  ED34   064A           XOP4A	DECT	R10			;DECREMENT STACK POINTER
                        ;	C	R10,@2*R9(R13)		;CHECK FOR OVERFLOW
                        ;	JLE	STACKERR
  ED36   C6B8           	MOV	*R8+,*R10
  ED38   82C8           	C	R8,R11			;KEEP PUSHING REGISTERS (R11 HOLDS EFFECTIVE ADDRESS OF REGISTER RN)
  ED3A   12FC           	JLE	XOP4A	
  ED3C   CB4A 0014      	MOV	R10,@2*R10(R13)		;UPDATE THE STACK POINTER 
  ED40   0380           	RTWP
                        ;
                        ;***********************************************
                        ; POPS REGISTERS R0 to RN OFF THE STACK
                        ;************************************************
                        ;
  ED42   C2AD 0014      XOP5	MOV	@2*R10(R13),R10		;GET STACK POINTER
  ED46   C6FA           XOP5A	MOV	*R10+,*R11		;GET FIRST REGISTER
  ED48   064B           	DECT	R11			;DECT TWO EFFECTIVE ADDRESS, IE RN
  ED4A   834B           	C	R11,R13			;COMPARE AGAINST WORKSPACE TOP ADDRESS IE R0
  ED4C   14FC           	JHE	XOP5A
  ED4E   CB4A 0014      	MOV	R10,@2*R10(R13)
  ED52   0380           	RTWP
                        
                        ;
                        ;
                        ;************************************************
                        ;	CALL A SUBROUTINE
                        ;	CALLING METHOD:   CALL SUBROUTINE_ADDRESS
                        ;*************************************************
                        ;
  ED54   C2AD 0014      XOP6	MOV	@2*R10(R13),R10 		;GET STACK POINTER
  ED58   064A           	DECT	R10
                        ;	C	R10,@2*R9(R13)		;CHECK FOR STACK OVERFLOW
                        ;	JLE	STACKERR			;O/P STACK OVERFLOW MESSAGE
  ED5A   C68E           	MOV	R14,*R10			;PUSH SAVED PC ONTO STACH
                        ;	ANDI	R14,1			;CHECK FOR ODD
                        ;	JNE    	ODDMSG
  ED5C   C38B           	MOV	R11,R14			;MOVE EA INTO R14 FOR CALL
  ED5E   CB4A 0014      	MOV	R10,@2*R10(R13)		;UPDATE STACK POINTER
  ED62   0380           	RTWP
                        ;
                        ;============================================
                        ;	SUBROUTINE RETURN
                        ;	CALLING METHOD:	RET
                        ;============================================
                        ;
  ED64   C2AD 0014      XOP7	MOV	@2*R10(R13),R10		;GET STACK POINTER
  ED68   C3BA           	MOV	*R10+,R14			;MOVE EA INTO R14 FOR CALL
  ED6A   CB4A 0014      	MOV	R10,@2*R10(R13)		;GET UPDATED STACK POINTER
  ED6E   0380           	RTWP				;RETURN
                        ;
                        ;*************************************************
                        ;	PUSH DATA/REGISTER ONTO THE STACK
                        ;	USES CALLER'S WP AND STACK POINTERS
                        ;*************************************************
                        ;
                        XOP8	;MOV	@FREEMEM,@2*R9(R13)	;UPDATE FREE MEMORY POINTER IE STACK LIMIT
  ED70   C2AD 0014      	MOV	@2*R10(R13),R10
  ED74   064A           	DECT	R10
                        ;	C	R10,@2*R9(R13)		;CHECK FOR OVERFLOW
                        ;	JLE	STACKERR
  ED76   C69B           	MOV	*R11,*R10
  ED78   CB4A 0014      	MOV	R10,@2*R10(R13)
  ED7C   0380           	RTWP
                        ;
                        ;	POP DATA/REGISTER OFF STACK
                        ;
  ED7E   C2AD 0014      XOP9	MOV	@2*R10(R13),R10
  ED82   C6FA           	MOV	*R10+,*R11
  ED84   CB4A 0014      	MOV	R10,@2*R10(R13)
  ED88   0380           	RTWP
                        ;
                        ;=====================================================
                        ;	WRITE A HEX CHARACTER
                        ;
                        ;	CALLING METHOD:   WHEX RN
                        ;
                        ;	FUNCTION: WRITE CONTENTS OF RN AS 4 HEX DIGITS 
                        ;========================================================
                        ;
  ED8A   C31B           XOP10	MOV	*R11,R12		;GET VALUE
  ED8C   0209 0004      	LI 	R9,4			;SET COUNTER TO 4 DIGITS
                        ;
  ED90   C20C           XOP10A	MOV	R12,R8			;MOVE 4 DIGITS INTO R8R 	
  ED92   09C8           	SRL	R8,12			;ISOLATE HEX DIGIT
  ED94   0A88           	SLA	R8,8			;BYTE ALIGN1
  ED96   0288 0900      	CI	R8,0900H		;IS THIS NUMERIC
  ED9A   1202           	JLE	XOP10B			;YES
  ED9C   0228 0700      	AI	R8,0700H		;ALPHA ADJUST
                        ;
  EDA0   0228 3000      XOP10B	AI	R8,'0'*256		;NUMERIC TO ASCII
  EDA4   2F08           	WRITE	R8			;O/P THE HEX DIGIT
  EDA6   0BCC           	SRC	R12,12			;ALIGN NEXT DIGIT
  EDA8   0609           	DEC	R9			;IF FINISHED EXIT
  EDAA   16F2           	JNE	XOP10A
  EDAC   0380           	RTWP
                        ;
                        ;===========================================================
                        ;	READ IN A 16 BIT HEX CHARACTER
                        ;
                        ;	CALL:   RHEX RN
                        ;
                        ;	FUNCTION: READ  CONTENTS INTO  RN AS 4 HEX DIGITS 
                        ;============================================================
                        ;
  EDAE   04CC           XOP11	CLR	R12			;CLEAR ACCUMULATOR
  EDB0   2F4A           XOP11A	READ	R10			;GET AN INPUT CHARACTER
  EDB2   2F0A           	WRITE	R10			;ECHO THE CHARACTER
                        ;
                        ;	CHECK FOR VALID HEX INPUT
                        ;
  EDB4   028A 3000      XOP11B	CI	R10,'0'*256		;BELOW MIN NUMERIC ?
  EDB8   1A10           	JL	NOTHEX			;IF YES, JUMP
  EDBA   028A 3900      	CI	R10,'9'*256		;ABOVE MAX NUMERIC ?
  EDBE   1208           	JLE	GOTONE			;IF NO, JUMP
  EDC0   028A 4100      	CI	R10,'A'*256		;BELOW MIN ALPHA ?
  EDC4   1A0A           	JL	NOTHEX			;IF YES JUMP
  EDC6   028A 4600      	CI	R10,'F'*256		;ABOVE MAX ALPHA ?
  EDCA   1B07           	JH	NOTHEX			;IF YES, JUMP
  EDCC   022A 0900      	AI	R10,0900H		;ALPHA ADJUST
  EDD0   0A4A           GOTONE	SLA	R10,4		;ISOLATE DIGIT
  EDD2   09CA           	SRL	R10,12		;WORD ALIGN DIGIT
                        ;
                        ;
                        ; DIGIT TO ACCUMULATOR
                        ;
  EDD4   0A4C           	SLA	R12,4		;MAKE ROOM FOR NEW DIGIT
  EDD6   A30A           	A	R10,R12		;ADD NEW DIGIT IN
  EDD8   10EB           	JMP	XOP11A		;GO GET NEXT DIGIT
  EDDA   C6CC           NOTHEX	MOV	R12,*R11		;RETURN THE VALUE
  EDDC   0380           	RTWP
                        ;
                        ;==================================================
                        ;	WRITE A CHARACTER
                        ;==================================================
                        ;
  EDDE   020C 0080      XOP12	LI	R12,CRUBAS
  EDE2   1D10           	SBO	16
  EDE4   1F16           XOP12A	TB	22
  EDE6   16FE           	JNE	XOP12A
  EDE8   321B           	LDCR	*R11,8
  EDEA   1E10           	SBZ	16
  EDEC   0380           	RTWP
                        ;
                        ;====================================================
                        ;	READ CHARACTER INTO LEFT BYTE (MSB)
                        ;====================================================
                        ;
  EDEE   020C 0080      XOP13	LI	R12,CRUBAS
  EDF2   1F15           XOP13A	TB	21		;RECEIVE BUFFER REG FULL ?
  EDF4   16FE           	JNE	XOP13A		;NO
  EDF6   04DB           	CLR	*R11
  EDF8   361B           	STCR	*R11,8
  EDFA   1E12           	SBZ	18		;SHOW WE RECEIVED CHARACTER
  EDFC   0380           	RTWP
                        ;
                        ;=========================================================
                        ;
                        ;	OUTPUT A NULL TERMINATED STRING
                        ;	MESG ADDR
                        ;
                        ;==========================================================
                        ;
  EDFE   D33B           XOP14	MOVB	*R11+,R12		;GET THE CHARACTER
  EE00   1302           	JEQ	XOP14A		;IF ZERO EXAT
  EE02   2F0C           	WRITE	R12
  EE04   10FC           	JMP	XOP14		;RETURN
  EE06   0380           XOP14A	RTWP
                        
                        ;=================================================
  EE08                  	EVEN
  EE08   2B             PLUS	TEXT	'+'
  EE09   00             	BYTE	0
  EE0A   2E             DOT	TEXT	'.'
  EE0B   00             	BYTE	0
  EE0C                  	EVEN
                        ;
                        ;
                        ;************************************************
                        ;	DEBUG AND TRACING INFORMATION
                        ;	STORE DEBUG TRACE DATA IF DEBUG_FLAG IS SET
                        ;
                        ;*************************************************
                        ;
  EE0C   C220 EECC      XOP15:	MOV	@TRACER_INDEX,R8
  EE10   0228 EECE      	AI	R8,TRACER_LIST		;THIS IS THE INDEX INTO THE LIST
  EE14   C60B           	MOV	R11,*R8			;SAVE THE CURRENT TRACE POINTER IN THE LIST
                        ;	INCT	@TRACER_INDEX		;MAYBE USE THIS LATER TO STORE A SEQUENCE AND PRINT OUT LATER
                        ;
                        ; 	NOW SAVE THE TRACE DATA
                        ;
                        ;	MOV	R14,R9			;ADJUST PC TO ACTUAL LOCATION AFTER THE STATEMENT
                        ;					;THAT IS BEING DEBUGGED
                        ;	AI	R9,-4			;NEED TO JUMP OVER DEBUG STATEMENT AS WELL
  EE16   CECE           	MOV	R14,*R11+			;STORE NEXT STATEMENT PROGRAMME COUNTER
  EE18   CECF           	MOV	R15,*R11+			;STORE STATUS
  EE1A   0208 0010      	LI	R8,16			;16 REGISTERS
  EE1E   CEFD           XOP15_LOOP:	MOV	*R13+,*R11+			;COPY REGISTERS
  EE20   0608           	DEC	R8
  EE22   16FD           	JNE	XOP15_LOOP
  EE24   022D FFE0      	AI	R13,-32			;RESTOR WORKSPACE REGISTER LOCATION
  EE28   1000           	JMP	REGIST
                        ;	RTWP
                        
                        ;
                        ; PRINT OUT DEBUGGING/TRACE PC, STATUS AND REGISTERS
                        ;
  EE2A   04C8           REGIST:	CLR	R8		;START WITH INDEX = 0
  EE2C   C248           	MOV	R8,R9
  EE2E   0229 EECE      	AI	R9,TRACER_LIST	;THIS IS THE STARTING ADDRESS
  EE32   C259           	MOV	*R9,R9		;GET ADDRESS
  EE34   0208 0010      	LI	R8,16
  EE38   2FA0 E666      REGIST0: 	MESG	@CRLF		;PRINT INDENTATION
  EE3C   2FA0 EEA4      	MESG	@PC_REG		;PRINT "PC="
  EE40   2EB9           	WHEX	*R9+
  EE42   2FA0 EE9C      	MESG	@ST_REG		;PRINT "ST="
  EE46   C2F9           	MOV	*R9+,R11		;GET STATUS REGISTER VALUE
  EE48   2E8B           	WHEX	R11
  EE4A   2FA0 EEA8      	MESG	@PC_REG+4		;PRINT SPACE
  EE4E   020A 3000      REGISTA	LI	R10,30H*256		;PRINT 0
  EE52   0A1B           	SLA	R11,1
  EE54   1802           	JOC	REGISTB
  EE56   2F0A           	WRITE	R10
  EE58   1003           	JMP	REGISTC
  EE5A   022A 0100      REGISTB	AI	R10,1*256		;PRINT 1
  EE5E   2F0A           	WRITE	R10
  EE60   0608           REGISTC	DEC	R8
  EE62   16F5           	JNE	REGISTA
                        
  EE64   04CA           	CLR	R10
  EE66   2FA0 E666      REGIST1:	MESG	@CRLF		;PRINT CR,LF
  EE6A   0208 5200      REGIST2:	LI	R8,'R'*256
  EE6E   2F08           	WRITE	R8		;PRINT "R"
  EE70   2F2A EEAA      	WRITE	@NUMTAB(R10)	;PRINT REGISTER NO
  EE74   2F2A EEAB      	WRITE	@NUMTAB+1(R10)	;PRINT REGISTER NO
  EE78   0208 3D00      	LI	R8,'='*256
  EE7C   2F08           	WRITE	R8
  EE7E   2EB9           	WHEX	*R9+		;PRINT REGISTER CONTENTS
  EE80   05CA           	INCT	R10
  EE82   028A 0020      	CI	R10,20H
  EE86   1307           	JEQ	XOP15_X
  EE88   0208 2000      	LI	R8,' '*256		;PRINT A SPACE
  EE8C   2F08           	WRITE	R8
  EE8E   26A0 EECA      	CZC	@MASKF,R10
  EE92   13E9           	JEQ	REGIST1
  EE94   10EA           	JMP	REGIST2
                        
  EE96   2FA0 E666      XOP15_X:	MESG	@CRLF		;PRINT INDENTATION
  EE9A   0380           	RTWP
                        
  EE9C   2020 5354      ST_REG:	TEXT	'  ST = '
  EEA0   203D 20        
  EEA3   00             	BYTE	0
  EEA4   5043 203D      PC_REG:	TEXT	'PC = '
  EEA8   20             
  EEA9   00             	BYTE	0
  EEAA   3020 3120      NUMTAB	TEXT	'0 1 2 3 4 5 6 7 8 9 101112131415'
  EEAE   3220 3320      
  EEB2   3420 3520      
  EEB6   3620 3720      
  EEBA   3820 3920      
  EEBE   3130 3131      
  EEC2   3132 3133      
  EEC6   3134 3135      
  EECA   000F           MASKF	WORD	00FH
                        TRACER_INDEX:
  EECC   0000           	WORD	0
                        TRACER_LIST:
  EECE                  	BSS	20		;DEBUG TRACE LIST
                        
                        ;
                        ; END OF PROGRAMME
                        ;
  EEE2                  	END

No error(s).
n          CX      2020      VhD EXCMD3          2020    2           jMTAB        ff            >eEL          Jg    2020        i3     WRT3        2020    FiRDWRT1            4157    RDY2        2ji  0000    RCE         $j            flOR          LfV4                2020      JfF DRIVE           2020    MD          DTRY        rmA           `iYP          \f    2020        
nYP    RT          2020    XOP0              5453    EG          G           hYS          tiKX                2020      .mKXXOP5            2020    ST0         8nTWP1        Xf            >j                  IT          2020    6fINTWP5            3852                P4          Xh      bfP15_X             2020      dm  REGIST1         2020          nmPWP0                        BhXOPWP3            3150              ~mP2      4         2020          nKERR      0A      2020      m  XOPWP9          2020           .EK            	          lj      P5A         2020    FmRSTCMD            2020          dg          :h                REGISTB         2020              JnCMD         REC   2020          hh      f        XOP15_LOOP        2020          |RTCMD             00E0    VERIFY            E9C2    XOP11A            EDB0    INTTAB            E6AA
SETDENS           EA34    FDCSTATUS         E638    TIMON             F000    RWTRY             E65A
WBOOT             E6F2    XOPTAB            E66A    GOTONE            EDD0    PC_REG            EEA4
XOP12             EDDE    REGISTC           EE60    DRVRDY            E660    TYPMUX            000A
CRUBAS            0080    INIT2             E6DE    SELMUX            0000    R13               000D
XOPWP12           ECD6
